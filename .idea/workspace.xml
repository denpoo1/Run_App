<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7a44fd61-b1ba-41b7-9a89-362b2755f03e" name="Changes" comment="update config env">
      <change afterPath="$PROJECT_DIR$/.idea/CoverUsage.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/controller/AchievementControllerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/controller/GoalControllerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/controller/RarityControllerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/controller/TrainingControllerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/dtoMapper/GoalDtoMapperDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/dtoMapper/TrainingDtoMapperDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/request/AchievementDeleteRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/request/AchievementRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/request/DeleteStorageRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/request/GoalRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/request/RarityRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/request/TrainingRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/response/DeleteResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/response/GoalResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/response/StorageServiceResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/response/StoryResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/response/TaskResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/response/TrainingResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/dto/response/UserResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/exception/GlobalExceptionHandlerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/exception/NoEntityFoundExceptionDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/repository/AchievementRepositoryDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/repository/GoalRepositoryDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/repository/TrainingRepositoryDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/service/serviceImpl/AchievementServiceImplDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/service/serviceImpl/GoalServiceImplDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/service/serviceImpl/RarityServiceImplDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/service/serviceImpl/TrainingServiceImplDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/service/serviceImpl/UserStatisticServiceImplDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/goalHandler/AverageRunningPaceHandlerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/goalHandler/GoalFactoryHandlerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/goalHandler/TotalKilometersHandlerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/goalHandler/TotalNumberTrainingHandlerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/goalHandler/TotalTrainingTimeHandlerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/GoalCompletionCalculatorDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/GoalMarkDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/GoalSchedulerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/TrainingObserverDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/TrainingStatisticsUpdaterDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/UserExistHandlerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/goalUpdater/AverageRunningPaceStrategyUpdateDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/goalUpdater/GoalUpdaterDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/goalUpdater/TotalKilometersStrategyUpdateDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/goalUpdater/TotalNumberTrainingStrategyUpdateDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java/com/runapp/achievementservice/util/supportClasses/goalUpdater/TotalTrainingTimeStrategyUpdateDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Achievement-Service/src/test/resources/application.yaml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/controller/TeamControllerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/controller/UserTeamControllerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/dtoMapper/TeamDtoMapperDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/dtoMapper/UserTeamDtoMapperDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/request/DeleteStorageRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/request/TeamDeleteRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/request/TeamRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/request/TeamUpdateRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/request/UserTeamRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/response/DeleteResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/response/ExceptionResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/response/StorageServiceResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/response/StoryResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/response/TaskResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/response/TeamResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/response/UserResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/dto/response/UserTeamResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/service/TeamServiceDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/java/com/runapp/guildservice/service/UserTeamServiceDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Guild-Service/src/test/resources/application.yaml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/controller/UserControllerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/dto/request/CreateDistanceGoalRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/dto/request/CreateDurationGoalRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/dto/request/CreateWeightGoalRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/dto/request/DeleteStorageRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/dto/request/UserDeleteRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/dto/request/UserRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/dto/response/DeleteResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/dto/response/StorageServiceResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/dto/response/UserResponseDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/dto/userDtoMapper/UserDtoMapperDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/model/DistanceGoalModelDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/model/DurationGoalModelDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/model/GoalModelDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/model/UserModelDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/model/WeightGoalModelDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/service/UserServiceDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Profile-Service/src/test/resources/application.yaml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/controller/RunPlanControllerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/controller/RunSessionControllerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/controller/VdotGradeControllerDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/dtoMapper/RunPlanDtoMapperDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/dtoMapper/RunSessionDtoMapperDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/request/DeleteStorageRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/request/RoutePointRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/request/RouteRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/request/RunPlanRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/request/RunSessionRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/request/RunTypeRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/request/TrainingAchievementRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/request/VdotGradeRequestDiffblueTest.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/Backend/Workout-Service/src/test/java/com/runapp/workoutservice/dto/response/AchievementResponseDiffblueTest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dataSources/ed422634-a49f-470e-baf1-bc7b4739207a.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources/ed422634-a49f-470e-baf1-bc7b4739207a.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Backend/Achievement-Service/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/Backend/Achievement-Service/pom.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Backend/Achievement-Service/target/classes/bootstrap-configserver.yml" beforeDir="false" afterPath="$PROJECT_DIR$/Backend/Achievement-Service/target/classes/bootstrap-configserver.yml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Backend/Guild-Service/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/Backend/Guild-Service/pom.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Backend/Profile-Service/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/Backend/Profile-Service/pom.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Backend/SocialService" beforeDir="false" afterPath="$PROJECT_DIR$/Backend/SocialService" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Backend/StoryProgress-Service" beforeDir="false" afterPath="$PROJECT_DIR$/Backend/StoryProgress-Service" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="BashSupport Pro Bash" />
        <option value="Enum" />
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/Backend/Profile-Service" />
    <option name="ROOT_SYNC" value="DONT_SYNC" />
  </component>
  <component name="GitToolBoxStore">
    <option name="projectConfigVersion" value="5" />
    <option name="recentBranches">
      <RecentBranches>
        <option name="branchesForRepo">
          <list>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1701903443" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="newbranch" />
                    <option name="lastUsedInstant" value="1701903144" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/Shoes-Service" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1702140062" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/Profile-Service" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1702150098" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="new_branch_name" />
                    <option name="lastUsedInstant" value="1702149998" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/Event-Service" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1702208813" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="new_branch_name" />
                    <option name="lastUsedInstant" value="1702208766" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/Guild-Service" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="master" />
                    <option name="lastUsedInstant" value="1702210525" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/StoryManagement-Service" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1702212517" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/Achievement-Service" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1702215938" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="new_branch_name" />
                    <option name="lastUsedInstant" value="1702215895" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/StoryProgress-Service" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1702217773" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="new_branch_name" />
                    <option name="lastUsedInstant" value="1702217696" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/Workout-Service" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1702219571" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="new_branch_name" />
                    <option name="lastUsedInstant" value="1702219545" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/Api-Gateway" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1702226237" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="new_branch_name" />
                    <option name="lastUsedInstant" value="1702226215" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/Diskovery-Service" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="master" />
                    <option name="lastUsedInstant" value="1702227500" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="new_branch_name" />
                    <option name="lastUsedInstant" value="1702227443" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/ConfigService" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1702229297" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="new_branch_name" />
                    <option name="lastUsedInstant" value="1702229277" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/SocialService" />
            </RecentBranchesForRepo>
            <RecentBranchesForRepo>
              <option name="branches">
                <list>
                  <RecentBranch>
                    <option name="branchName" value="main" />
                    <option name="lastUsedInstant" value="1702229414" />
                  </RecentBranch>
                  <RecentBranch>
                    <option name="branchName" value="new_branch_name" />
                    <option name="lastUsedInstant" value="1702229392" />
                  </RecentBranch>
                </list>
              </option>
              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$/Backend/Storage-Service" />
            </RecentBranchesForRepo>
          </list>
        </option>
      </RecentBranches>
    </option>
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="2XIWmY9Fhi4i8sQcUYPgMa0PPcO" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RequestMappingsPanelOrder0": "0",
    "RequestMappingsPanelOrder1": "1",
    "RequestMappingsPanelWidth0": "75",
    "RequestMappingsPanelWidth1": "75",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "WebServerToolWindowFactoryState": "false",
    "git-widget-placeholder": "main",
    "last_opened_file_path": "/Users/denpool/IdeaProjects/Run_App/Backend/Profile-Service/src/test/resources",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "project.structure.last.edited": "Modules",
    "project.structure.proportion": "0.15",
    "project.structure.side.proportion": "0.2",
    "settings.editor.selected.configurable": "preferences.pluginManager",
    "spring.configuration.checksum": "785be4792665f4b8570485dd8249cded",
    "vue.rearranger.settings.migration": "true"
  },
  "keyToStringList": {
    "DatabaseDriversLRU": [
      "postgresql"
    ]
  }
}]]></component>
  <component name="ReactorSettings">
    <option name="notificationShown" value="true" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/Backend/Profile-Service/src/test/resources" />
      <recent name="$PROJECT_DIR$/Backend/Guild-Service/src/test/resources" />
      <recent name="$PROJECT_DIR$/Backend/Profile-Service/src/main/resources" />
      <recent name="$PROJECT_DIR$/Backend/Workout-Service/src/main/resources" />
      <recent name="$PROJECT_DIR$/Backend/Achievement-Service/src/main/java/com/runapp/achievementservice/service/goalStrategy" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/Backend/Profile-Service" />
      <recent name="$PROJECT_DIR$/Backend/Shoes-Service/.github/workflows/docker-resourse" />
      <recent name="$PROJECT_DIR$/Backend/Shoes-Service/.github/workflows" />
      <recent name="$PROJECT_DIR$/Backend/Workout-Service/src/test" />
      <recent name="$PROJECT_DIR$/docker-templates" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="com.runapp.workoutservice.controller" />
      <recent name="com.runapp.workoutservice" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="com.runapp.achievementservice.util.supportClasses" />
      <recent name="com.runapp.achievementservice.feignClient" />
      <recent name="com.runapp.achievementservice.service" />
      <recent name="com.runapp.achievementservice.dto.dtoMapper" />
      <recent name="com.runapp.shoesservice.utill" />
    </key>
  </component>
  <component name="RunDashboard">
    <option name="configurationTypes">
      <set>
        <option value="SpringBootApplicationConfigurationType" />
      </set>
    </option>
  </component>
  <component name="RunManager" selected="JUnit.All in ProfileService">
    <configuration name="All in GuildService" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="GuildService" />
      <option name="PACKAGE_NAME" value="" />
      <option name="TEST_OBJECT" value="package" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="All in ProfileService" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="ProfileService" />
      <option name="PACKAGE_NAME" value="" />
      <option name="TEST_OBJECT" value="package" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="java in AchievementService" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="AchievementService" />
      <option name="TEST_OBJECT" value="directory" />
      <dir value="$PROJECT_DIR$/Backend/Achievement-Service/src/test/java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="java in WorkoutService" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="WorkoutService" />
      <option name="TEST_OBJECT" value="directory" />
      <dir value="$PROJECT_DIR$/Backend/Workout-Service/src/test/java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="AchievementServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <option name="ALTERNATIVE_JRE_PATH" value="20" />
      <module name="AchievementService" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.achievementservice.AchievementServiceApplication" />
      <extension name="net.ashald.envfile">
        <option name="IS_ENABLED" value="true" />
        <option name="IS_SUBST" value="false" />
        <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
        <option name="IS_IGNORE_MISSING_FILES" value="false" />
        <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
        <ENTRIES>
          <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
          <ENTRY IS_ENABLED="false" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/achievement-service.env" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/spring-profile.env" />
          <ENTRY IS_ENABLED="true" PARSER="yaml" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/json config/achievement-service.json" />
        </ENTRIES>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ApiGatewayApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="Api-Gateway" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.apigateway.ApiGatewayApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ConfigServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="ConfigService" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.configservice.ConfigServiceApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="DiscoveryServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
      <module name="DiscoveryService" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.example.discoveryservice.DiscoveryServiceApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="EventServiceApplication (1)" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
      <module name="event-service" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="hakaton.eventservice.EventServiceApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="EventServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
      <module name="event-service" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.eventservice.EventServiceApplication" />
      <extension name="net.ashald.envfile">
        <option name="IS_ENABLED" value="true" />
        <option name="IS_SUBST" value="false" />
        <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
        <option name="IS_IGNORE_MISSING_FILES" value="false" />
        <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
        <ENTRIES>
          <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/env_files/event-service.env" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/spring-profile.env" />
        </ENTRIES>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="EventServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
      <module name="event-service" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.eventservice.EventServiceApplication" />
      <extension name="net.ashald.envfile">
        <option name="IS_ENABLED" value="true" />
        <option name="IS_SUBST" value="false" />
        <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
        <option name="IS_IGNORE_MISSING_FILES" value="false" />
        <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
        <ENTRIES>
          <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/event-service.env" />
        </ENTRIES>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="GuildServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="GuildService" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.guildservice.GuildServiceApplication" />
      <extension name="net.ashald.envfile">
        <option name="IS_ENABLED" value="true" />
        <option name="IS_SUBST" value="false" />
        <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
        <option name="IS_IGNORE_MISSING_FILES" value="false" />
        <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
        <ENTRIES>
          <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/env_files/guild-service.env" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/spring-profile.env" />
        </ENTRIES>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ProfileServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="ProfileService" />
      <selectedOptions>
        <option name="environmentVariables" />
      </selectedOptions>
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.profileservice.ProfileServiceApplication" />
      <extension name="net.ashald.envfile">
        <option name="IS_ENABLED" value="true" />
        <option name="IS_SUBST" value="false" />
        <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
        <option name="IS_IGNORE_MISSING_FILES" value="false" />
        <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
        <ENTRIES>
          <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/spring-profile.env" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/env_files/profile-service.env" />
        </ENTRIES>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ShoesServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <envs>
        <env name="DATABASE_NAME" value="Run_App" />
        <env name="DATABASE_PASSWORD" value="25032001" />
        <env name="DATABASE_USERNAME" value="postgres" />
        <env name="DOCKER_CONTAINER_TAG" value="0.0.1" />
        <env name="DOCKER_NAME_CONTAINER" value="shoes-service" />
        <env name="DOCKER_PASSWORD" value="Denis25032001" />
        <env name="DOCKER_USERNAME" value="denpool" />
        <env name="GCP_APP" value="run-app" />
        <env name="GCP_PROJECT_ID" value="runapp-407111" />
        <env name="GCP_REGION" value="europe-central2" />
        <env name="GCP_SQL_ACCOUNT_SERVICE_NAME" value="denys-to-connect-db@runapp-407111.iam.gserviceaccount.com" />
        <env name="PROFILE_SERVICE_URL" value="http://localhost:4000" />
        <env name="SHOES_SERVICE_SERVER_PORT" value="2222" />
        <env name="SQL_INSTANCE_NAME" value="runapp-407111:europe-central2:run-app-db" />
        <env name="STORAGE_SERVICE_URL" value="http://localhost:6500" />
        <env name="ZIPKIN_URL" value="https://zipkin-4itoauiicq-lm.a.run.app" />
      </envs>
      <module name="ShoesService" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.shoesservice.ShoesServiceApplication" />
      <extension name="net.ashald.envfile">
        <option name="IS_ENABLED" value="true" />
        <option name="IS_SUBST" value="false" />
        <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
        <option name="IS_IGNORE_MISSING_FILES" value="false" />
        <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
        <ENTRIES>
          <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/shoes-service.env" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/spring-profile.env" />
        </ENTRIES>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="SocialServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" activateToolWindowBeforeRun="false" nameIsGenerated="true">
      <envs>
        <env name="MAIL_HOST" value="smtp.gmail.com" />
        <env name="MAIL_PASSWORD" value="atmsbtaxhduyuvmk" />
        <env name="MAIL_PORT" value="587" />
        <env name="MAIL_PROTOCOL" value="smtp" />
        <env name="MAIL_USERNAME" value="run.app.pet.project@gmail.com" />
        <env name="SERVICE_SERVER_PORT" value="5000" />
        <env name="ZIPKIN_URL" value="https://zipkin-4itoauiicq-lm.a.run.app" />
      </envs>
      <option name="INCLUDE_PROVIDED_SCOPE" value="false" />
      <module name="SocialService" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.socialservice.SocialServiceApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="StorageServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="StorageService" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.storageservice.StorageServiceApplication" />
      <extension name="net.ashald.envfile">
        <option name="IS_ENABLED" value="true" />
        <option name="IS_SUBST" value="false" />
        <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
        <option name="IS_IGNORE_MISSING_FILES" value="false" />
        <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
        <ENTRIES>
          <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
          <ENTRY IS_ENABLED="false" PARSER="yaml" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/env_files/" />
        </ENTRIES>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="StoryManagementServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
      <module name="StoryManagementService" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.storymanagementservice.StoryManagementServiceApplication" />
      <extension name="net.ashald.envfile">
        <option name="IS_ENABLED" value="true" />
        <option name="IS_SUBST" value="false" />
        <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
        <option name="IS_IGNORE_MISSING_FILES" value="false" />
        <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
        <ENTRIES>
          <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/env_files/story-manager-service.env" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/spring-profile.env" />
        </ENTRIES>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="StoryProgressServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="StoryProgressService" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.storyprogressservice.StoryProgressServiceApplication" />
      <extension name="net.ashald.envfile">
        <option name="IS_ENABLED" value="true" />
        <option name="IS_SUBST" value="false" />
        <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
        <option name="IS_IGNORE_MISSING_FILES" value="false" />
        <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
        <ENTRIES>
          <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/env_files/story-progress-service.env" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/spring-profile.env" />
        </ENTRIES>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WorkoutServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="WorkoutService" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.runapp.workoutservice.WorkoutServiceApplication" />
      <extension name="net.ashald.envfile">
        <option name="IS_ENABLED" value="true" />
        <option name="IS_SUBST" value="false" />
        <option name="IS_PATH_MACRO_SUPPORTED" value="false" />
        <option name="IS_IGNORE_MISSING_FILES" value="false" />
        <option name="IS_ENABLE_EXPERIMENTAL_INTEGRATIONS" value="false" />
        <ENTRIES>
          <ENTRY IS_ENABLED="true" PARSER="runconfig" IS_EXECUTABLE="false" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/spring-profile.env" />
          <ENTRY IS_ENABLED="true" PARSER="env" IS_EXECUTABLE="false" PATH="$USER_HOME$/Desktop/EnvFiles/env_files/workout-service.env" />
        </ENTRIES>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Write tests for package controller" type="com.diffblue.cover.write-tests-run-configuration" factoryName="com.diffblue.cover.write-tests-run-configuration">
      <module name="AchievementService" />
      <settings run-config-name="Write tests for package controller" include-system-env-vars="true" skeleton-tests-only="false">
        <jvm-args />
        <selection-scope>package</selection-scope>
        <selected-element key="com.runapp.achievementservice.controller" />
      </settings>
      <method v="2" />
    </configuration>
    <configuration name="Write tests for package repository" type="com.diffblue.cover.write-tests-run-configuration" factoryName="com.diffblue.cover.write-tests-run-configuration">
      <module name="AchievementService" />
      <settings run-config-name="Write tests for package repository" include-system-env-vars="true" skeleton-tests-only="false">
        <jvm-args />
        <selection-scope>package</selection-scope>
        <selected-element key="com.runapp.achievementservice.repository" />
      </settings>
      <method v="2" />
    </configuration>
    <configuration name="Write tests for package workoutservice" type="com.diffblue.cover.write-tests-run-configuration" factoryName="com.diffblue.cover.write-tests-run-configuration" activateToolWindowBeforeRun="false" temporary="true">
      <module name="WorkoutService" />
      <settings run-config-name="Write tests for package workoutservice" include-system-env-vars="true" skeleton-tests-only="false">
        <jvm-args />
        <selection-scope>package</selection-scope>
        <selected-element key="com.runapp.workoutservice" />
      </settings>
      <method v="2" />
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="docker-compose.yml" temporary="true">
      <deployment type="docker-compose.yml">
        <settings />
      </deployment>
      <method v="2" />
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="dockerfile" temporary="true">
      <deployment type="dockerfile">
        <settings />
      </deployment>
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Diffblue Cover.Write tests for package controller" />
      <item itemvalue="Diffblue Cover.Write tests for package repository" />
      <item itemvalue="Diffblue Cover.Write tests for package workoutservice" />
      <item itemvalue="JUnit.All in GuildService" />
      <item itemvalue="JUnit.All in ProfileService" />
      <item itemvalue="JUnit.java in AchievementService" />
      <item itemvalue="JUnit.java in WorkoutService" />
      <item itemvalue="Spring Boot.EventServiceApplication (1)" />
      <item itemvalue="Spring Boot.AchievementServiceApplication" />
      <item itemvalue="Spring Boot.ApiGatewayApplication" />
      <item itemvalue="Spring Boot.ConfigServiceApplication" />
      <item itemvalue="Spring Boot.DiscoveryServiceApplication" />
      <item itemvalue="Spring Boot.EventServiceApplication" />
      <item itemvalue="Spring Boot.GuildServiceApplication" />
      <item itemvalue="Spring Boot.ProfileServiceApplication" />
      <item itemvalue="Spring Boot.ShoesServiceApplication" />
      <item itemvalue="Spring Boot.SocialServiceApplication" />
      <item itemvalue="Spring Boot.StorageServiceApplication" />
      <item itemvalue="Spring Boot.StoryManagementServiceApplication" />
      <item itemvalue="Spring Boot.StoryProgressServiceApplication" />
      <item itemvalue="Spring Boot.WorkoutServiceApplication" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="JUnit.All in ProfileService" />
        <item itemvalue="JUnit.java in AchievementService" />
        <item itemvalue="JUnit.All in GuildService" />
        <item itemvalue="JUnit.java in WorkoutService" />
        <item itemvalue="Diffblue Cover.Write tests for package workoutservice" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="7a44fd61-b1ba-41b7-9a89-362b2755f03e" name="Changes" comment="" />
      <created>1698317234302</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1698317234302</updated>
      <workItem from="1698317235476" duration="3437000" />
      <workItem from="1698407931814" duration="682000" />
      <workItem from="1698485278957" duration="5479000" />
      <workItem from="1698496046268" duration="2135000" />
      <workItem from="1698515096148" duration="37000" />
      <workItem from="1698571206200" duration="3040000" />
      <workItem from="1698592002732" duration="21000" />
      <workItem from="1698653931906" duration="2930000" />
      <workItem from="1698675898458" duration="60000" />
      <workItem from="1698747102355" duration="11041000" />
      <workItem from="1698836406859" duration="14877000" />
      <workItem from="1699376366753" duration="3528000" />
      <workItem from="1699400915178" duration="191000" />
      <workItem from="1699456245333" duration="137000" />
      <workItem from="1699456431415" duration="1675000" />
      <workItem from="1699524482330" duration="50000" />
      <workItem from="1699524956395" duration="1886000" />
      <workItem from="1699642000734" duration="5084000" />
      <workItem from="1699726814308" duration="2370000" />
      <workItem from="1699870788928" duration="1808000" />
      <workItem from="1699877839514" duration="3342000" />
      <workItem from="1699892399901" duration="1639000" />
      <workItem from="1699895793878" duration="633000" />
      <workItem from="1699952416559" duration="1869000" />
      <workItem from="1699960297377" duration="625000" />
      <workItem from="1699975342152" duration="93000" />
      <workItem from="1700499505258" duration="652000" />
      <workItem from="1700501314720" duration="1319000" />
      <workItem from="1700580422133" duration="16000" />
      <workItem from="1700764099748" duration="114000" />
      <workItem from="1701008142710" duration="122000" />
      <workItem from="1701009033681" duration="912000" />
      <workItem from="1701277815339" duration="4707000" />
      <workItem from="1701282863476" duration="11345000" />
      <workItem from="1701432094760" duration="322000" />
      <workItem from="1701518689865" duration="2542000" />
      <workItem from="1701525274857" duration="2906000" />
      <workItem from="1701531713631" duration="17445000" />
      <workItem from="1701608010926" duration="23247000" />
      <workItem from="1701683333828" duration="6760000" />
      <workItem from="1701693243154" duration="109000" />
      <workItem from="1701696857410" duration="8604000" />
      <workItem from="1701789507210" duration="33000" />
      <workItem from="1701798796127" duration="3547000" />
      <workItem from="1701863148874" duration="2682000" />
      <workItem from="1701873980189" duration="30795000" />
      <workItem from="1702035611095" duration="1258000" />
      <workItem from="1702037829920" duration="4156000" />
      <workItem from="1702057661412" duration="12189000" />
      <workItem from="1702116015639" duration="21953000" />
      <workItem from="1702207318903" duration="13745000" />
      <workItem from="1702381558790" duration="6754000" />
      <workItem from="1702398187864" duration="31000" />
      <workItem from="1702402487222" duration="856000" />
      <workItem from="1702576193843" duration="10366000" />
      <workItem from="1702639623092" duration="9660000" />
      <workItem from="1702660353445" duration="1820000" />
      <workItem from="1702666097619" duration="617000" />
      <workItem from="1702666737152" duration="2851000" />
      <workItem from="1702719237467" duration="7440000" />
      <workItem from="1702894799049" duration="5917000" />
      <workItem from="1702910190905" duration="7235000" />
      <workItem from="1702926328153" duration="441000" />
      <workItem from="1703005043044" duration="6000" />
      <workItem from="1703343401320" duration="891000" />
      <workItem from="1703344505758" duration="3855000" />
      <workItem from="1703359940124" duration="5722000" />
      <workItem from="1703416452458" duration="7762000" />
      <workItem from="1703427981130" duration="4871000" />
      <workItem from="1703433456547" duration="7975000" />
      <workItem from="1703507635360" duration="20958000" />
      <workItem from="1703536001686" duration="538000" />
      <workItem from="1703536728101" duration="61000" />
      <workItem from="1703536807207" duration="5780000" />
    </task>
    <task id="LOCAL-00001" summary="global update">
      <option name="closed" value="true" />
      <created>1698852625168</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1698852625168</updated>
    </task>
    <task id="LOCAL-00002" summary="global update">
      <option name="closed" value="true" />
      <created>1698852683398</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1698852683398</updated>
    </task>
    <task id="LOCAL-00003" summary="global update">
      <option name="closed" value="true" />
      <created>1698852827590</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1698852827590</updated>
    </task>
    <task id="LOCAL-00004" summary="correct classes and algorithm in workout-service">
      <option name="closed" value="true" />
      <created>1701570480015</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1701570480015</updated>
    </task>
    <task id="LOCAL-00005" summary="correct classes and algorithm in workout-service">
      <option name="closed" value="true" />
      <created>1701802337124</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1701802337124</updated>
    </task>
    <task id="LOCAL-00006" summary="correct classes and algorithm in workout-service">
      <option name="closed" value="true" />
      <created>1701802542866</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1701802542866</updated>
    </task>
    <task id="LOCAL-00007" summary="fixed mail service and add some pipeline into services">
      <option name="closed" value="true" />
      <created>1702587789113</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1702587789114</updated>
    </task>
    <task id="LOCAL-00008" summary="fixed mail service and add some pipeline into services">
      <option name="closed" value="true" />
      <created>1702588202570</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1702588202571</updated>
    </task>
    <task id="LOCAL-00009" summary="fixed maven depend">
      <option name="closed" value="true" />
      <created>1703533004491</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1703533004491</updated>
    </task>
    <task id="LOCAL-00010" summary="update training controller">
      <option name="closed" value="true" />
      <created>1703533096581</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1703533096581</updated>
    </task>
    <task id="LOCAL-00011" summary="update config env">
      <option name="closed" value="true" />
      <created>1703533150180</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1703533150180</updated>
    </task>
    <task id="LOCAL-00012" summary="update config env">
      <option name="closed" value="true" />
      <created>1703533197846</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1703533197846</updated>
    </task>
    <option name="localTasksCounter" value="13" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="UnknownFeatures">
    <option featureType="dependencySupport" implementationName="java:org.springframework.security:spring-security-core" />
    <option featureType="dependencySupport" implementationName="java:org.springframework:spring-core" />
    <option featureType="dependencySupport" implementationName="java:jakarta.validation:jakarta.validation-api" />
    <option featureType="dependencySupport" implementationName="java:com.google.protobuf:protobuf-java" />
    <option featureType="dependencySupport" implementationName="java:com.google.cloud:google-cloud-storage" />
    <option featureType="dependencySupport" implementationName="java:io.projectreactor:reactor-core" />
    <option featureType="dependencySupport" implementationName="java:org.springframework.data:spring-data-commons" />
    <option featureType="dependencySupport" implementationName="java:org.springframework.cloud:spring-cloud-context" />
    <option featureType="dependencySupport" implementationName="java:org.hibernate.validator:hibernate-validator" />
    <option featureType="dependencySupport" implementationName="java:org.springframework:spring-webmvc" />
    <option featureType="dependencySupport" implementationName="java:org.projectlombok:lombok" />
    <option featureType="dependencySupport" implementationName="java:jakarta.persistence:jakarta.persistence-api" />
    <option featureType="dependencySupport" implementationName="java:io.grpc:grpc-api" />
    <option featureType="dependencySupport" implementationName="java:org.thymeleaf:thymeleaf" />
    <option featureType="dependencySupport" implementationName="java:jakarta.ws.rs:jakarta.ws.rs-api" />
    <option featureType="dependencySupport" implementationName="java:org.springframework.boot:spring-boot" />
    <option featureType="dependencySupport" implementationName="java:jakarta.xml.ws:jakarta.xml.ws-api" />
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_SMELLS_BEFORE_PROJECT_COMMIT" value="false" />
    <option name="CHECK_NEW_TODO" value="false" />
    <MESSAGE value="global update" />
    <MESSAGE value="correct classes and algorithm in workout-service" />
    <MESSAGE value="fixed mail service and add some pipeline into services" />
    <MESSAGE value="fixed maven depend" />
    <MESSAGE value="update training controller" />
    <MESSAGE value="update config env" />
    <option name="LAST_COMMIT_MESSAGE" value="update config env" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/Backend/SocialService/src/main/java/com/runapp/socialservice/service/EmailServiceImp.java</url>
          <line>43</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/Backend/Achievement-Service/src/main/java/com/runapp/achievementservice/util/supportClasses/GoalCompletionCalculator.java</url>
          <line>7</line>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="089928">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/ProfileServiceApplication.java" />
                </list>
              </option>
              <option name="id" value="089928" />
              <option name="initiateTms" value="1701284761608" />
              <option name="request" value="Generate tests for class ProfileServiceApplication" />
              <option name="response" value="" />
              <option name="responseDescription" value="&lt;em&gt;Unit Test Agent started.&lt;br/&gt;Unable to identify the method names for unit test coverage. Default flow will be executed instead.&lt;br/&gt;&lt;/em&gt;Sure! I can help you generate tests for the `ProfileServiceApplication` class. Here's an example of how you can write unit tests for this class using JUnit and Mockito:&#10;&#10;```java&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.Mockito;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;&#10;import org.springframework.cloud.openfeign.EnableFeignClients;&#10;&#10;@SpringBootTest&#10;@EnableDiscoveryClient&#10;@EnableFeignClients&#10;public class ProfileServiceApplicationTests {&#10;&#10;    @Test&#10;    public void contextLoads() {&#10;        // Test that the application context loads successfully&#10;        ProfileServiceApplication.main(new String[]{});&#10;    }&#10;&#10;    @Test&#10;    public void mainTest() {&#10;        // Test the main method of the application&#10;        SpringApplication applicationMock = Mockito.mock(SpringApplication.class);&#10;        ProfileServiceApplication.main(new String[]{});&#10;        Mockito.verify(applicationMock, Mockito.times(1)).run(ProfileServiceApplication.class, new String[]{});&#10;    }&#10;}&#10;```&#10;&#10;In the `contextLoads()` test, we simply check if the application context loads successfully by calling the `main()` method.&#10;&#10;In the `mainTest()` test, we use Mockito to mock the `SpringApplication` class and verify that the `run()` method is called with the correct arguments.&#10;&#10;Make sure you have the necessary dependencies (JUnit and Mockito) added to your project's build file." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701284779321" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/ProfileServiceApplication.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="218954">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/controller/UserControllerTest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/UserResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/model/UserModel.java" />
                </list>
              </option>
              <option name="id" value="218954" />
              <option name="initiateTms" value="1701632477389" />
              <option name="request" value="How to fix the following error:&#10;Cannot resolve constructor 'FieldError(String, String)'" />
              <option name="response" value="" />
              <option name="responseDescription" value="The error &quot;Cannot resolve constructor 'FieldError(String, String)'&quot; occurs because the `FieldError` class does not have a constructor that takes two `String` arguments. &#10;&#10;To fix this error, you need to use the appropriate constructor of the `FieldError` class. The constructor of `FieldError` requires the following arguments:&#10;&#10;1. `String objectName`: The name of the object that contains the field with the error.&#10;2. `String field`: The name of the field with the error.&#10;3. `String defaultMessage`: The default error message.&#10;&#10;Here's an updated version of the `createUser_InvalidUserRequest_ReturnsBadRequestWithValidationErrors()` test case with the correct usage of the `FieldError` constructor:&#10;&#10;```java&#10;@Test&#10;void createUser_InvalidUserRequest_ReturnsBadRequestWithValidationErrors() {&#10;    // Arrange&#10;    UserRequest userRequest = new UserRequest();&#10;    BindingResult bindingResult = mock(BindingResult.class);&#10;    when(bindingResult.hasErrors()).thenReturn(true);&#10;    &#10;    String fieldName = &quot;fieldName&quot;;&#10;    String errorMessage = &quot;errorMessage&quot;;&#10;    FieldError fieldError = new FieldError(userRequest.getClass().getSimpleName(), fieldName, errorMessage);&#10;    when(bindingResult.getFieldErrors()).thenReturn(Collections.singletonList(fieldError));&#10;&#10;    // Act&#10;    ResponseEntity&lt;Object&gt; response = userController.createUser(userRequest, bindingResult);&#10;&#10;    // Assert&#10;    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());&#10;    assertTrue(response.getBody() instanceof Map);&#10;    Map&lt;String, String&gt; validationErrors = (Map&lt;String, String&gt;) response.getBody();&#10;    assertEquals(errorMessage, validationErrors.get(fieldName));&#10;}&#10;```&#10;&#10;In this updated code, we create a `FieldError` object by passing the appropriate arguments to the constructor. The `objectName` is obtained using `userRequest.getClass().getSimpleName()` to get the name of the class of the object containing the field with the error.&#10;&#10;By using the correct constructor, the error should be resolved, and the test case should run without any issues." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701632482616" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/repository/UserRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/service/UserService.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/userDtoMapper/UserDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/controller/UserControllerTest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/model/UserModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/UserResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/utill/RoleEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/feignClient/StorageServiceClient.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/StorageServiceResponse.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="2fd0b4">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                </list>
              </option>
              <option name="id" value="2fd0b4" />
              <option name="initiateTms" value="1701632318136" />
              <option name="request" value="Generate tests for class UserController" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! Here's an example of how you can generate tests for the `UserController` class:&#10;&#10;```java&#10;import com.runapp.profileservice.dto.request.UserRequest;&#10;import com.runapp.profileservice.dto.response.UserResponse;&#10;import com.runapp.profileservice.model.UserModel;&#10;import com.runapp.profileservice.service.UserService;&#10;import com.runapp.profileservice.dto.userDtoMapper.UserDtoMapper;&#10;import com.runapp.profileservice.feignClient.StorageServiceClient;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.validation.BindingResult;&#10;&#10;import java.util.*;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;class UserControllerTest {&#10;&#10;    @Mock&#10;    private UserService userService;&#10;&#10;    @Mock&#10;    private UserDtoMapper userDtoMapper;&#10;&#10;    @Mock&#10;    private StorageServiceClient storageServiceClient;&#10;&#10;    @InjectMocks&#10;    private UserController userController;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Test&#10;    void createUser_ValidUserRequest_ReturnsCreatedUserResponse() {&#10;        // Arrange&#10;        UserRequest userRequest = new UserRequest();&#10;        UserModel userModel = new UserModel();&#10;        UserResponse userResponse = new UserResponse();&#10;        when(userDtoMapper.toModel(userRequest)).thenReturn(userModel);&#10;        when(userService.createUser(userModel)).thenReturn(userModel);&#10;        when(userDtoMapper.toResponse(userModel)).thenReturn(userResponse);&#10;&#10;        // Act&#10;        ResponseEntity&lt;Object&gt; response = userController.createUser(userRequest, mock(BindingResult.class));&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.CREATED, response.getStatusCode());&#10;        assertEquals(userResponse, response.getBody());&#10;    }&#10;&#10;    @Test&#10;    void createUser_InvalidUserRequest_ReturnsBadRequestWithValidationErrors() {&#10;        // Arrange&#10;        UserRequest userRequest = new UserRequest();&#10;        BindingResult bindingResult = mock(BindingResult.class);&#10;        when(bindingResult.hasErrors()).thenReturn(true);&#10;        when(bindingResult.getFieldErrors()).thenReturn(Collections.singletonList(new FieldError(&quot;fieldName&quot;, &quot;errorMessage&quot;)));&#10;&#10;        // Act&#10;        ResponseEntity&lt;Object&gt; response = userController.createUser(userRequest, bindingResult);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());&#10;        assertTrue(response.getBody() instanceof Map);&#10;        Map&lt;String, String&gt; validationErrors = (Map&lt;String, String&gt;) response.getBody();&#10;        assertEquals(&quot;errorMessage&quot;, validationErrors.get(&quot;fieldName&quot;));&#10;    }&#10;&#10;    // Add more test methods for other controller methods...&#10;&#10;}&#10;```&#10;&#10;In these tests, we are using Mockito to mock the dependencies (`UserService`, `UserDtoMapper`, and `StorageServiceClient`) of the `UserController` class. We then inject these mocks into the `UserController` using the `@InjectMocks` annotation.&#10;&#10;The `setUp()` method is used to initialize the mocks before each test case.&#10;&#10;The `createUser_ValidUserRequest_ReturnsCreatedUserResponse()` test case verifies that when a valid `UserRequest` is provided, the `UserController` creates a new user, maps the created user to a `UserResponse`, and returns a `ResponseEntity` with the created user and `HttpStatus.CREATED`.&#10;&#10;The `createUser_InvalidUserRequest_ReturnsBadRequestWithValidationErrors()` test case verifies that when an invalid `UserRequest` is provided, the `UserController` returns a `ResponseEntity` with `HttpStatus.BAD_REQUEST` and a map of validation errors.&#10;&#10;You can add more test methods for other methods in the `UserController` class following a similar pattern." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701632329530" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/repository/UserRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/service/UserService.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/userDtoMapper/UserDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/model/UserModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/UserResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/utill/RoleEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/feignClient/StorageServiceClient.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/StorageServiceResponse.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="3bf346">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/controller/UserControllerTest.java" />
                </list>
              </option>
              <option name="id" value="3bf346" />
              <option name="initiateTms" value="1701632360846" />
              <option name="request" value="more test write" />
              <option name="response" value="" />
              <option name="responseDescription" value="Certainly! Here are a few more test cases you can add for the remaining methods in the `UserController` class:&#10;&#10;```java&#10;import com.runapp.profileservice.dto.request.UserRequest;&#10;import com.runapp.profileservice.dto.response.UserResponse;&#10;import com.runapp.profileservice.model.UserModel;&#10;import com.runapp.profileservice.service.UserService;&#10;import com.runapp.profileservice.dto.userDtoMapper.UserDtoMapper;&#10;import com.runapp.profileservice.feignClient.StorageServiceClient;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.validation.BindingResult;&#10;&#10;import java.util.*;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;class UserControllerTest {&#10;&#10;    @Mock&#10;    private UserService userService;&#10;&#10;    @Mock&#10;    private UserDtoMapper userDtoMapper;&#10;&#10;    @Mock&#10;    private StorageServiceClient storageServiceClient;&#10;&#10;    @InjectMocks&#10;    private UserController userController;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Test&#10;    void createUser_ValidUserRequest_ReturnsCreatedUserResponse() {&#10;        // Arrange&#10;        UserRequest userRequest = new UserRequest();&#10;        UserModel userModel = new UserModel();&#10;        UserResponse userResponse = new UserResponse();&#10;        when(userDtoMapper.toModel(userRequest)).thenReturn(userModel);&#10;        when(userService.createUser(userModel)).thenReturn(userModel);&#10;        when(userDtoMapper.toResponse(userModel)).thenReturn(userResponse);&#10;&#10;        // Act&#10;        ResponseEntity&lt;Object&gt; response = userController.createUser(userRequest, mock(BindingResult.class));&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.CREATED, response.getStatusCode());&#10;        assertEquals(userResponse, response.getBody());&#10;    }&#10;&#10;    @Test&#10;    void createUser_InvalidUserRequest_ReturnsBadRequestWithValidationErrors() {&#10;        // Arrange&#10;        UserRequest userRequest = new UserRequest();&#10;        BindingResult bindingResult = mock(BindingResult.class);&#10;        when(bindingResult.hasErrors()).thenReturn(true);&#10;        when(bindingResult.getFieldErrors()).thenReturn(Collections.singletonList(new FieldError(&quot;fieldName&quot;, &quot;errorMessage&quot;)));&#10;&#10;        // Act&#10;        ResponseEntity&lt;Object&gt; response = userController.createUser(userRequest, bindingResult);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());&#10;        assertTrue(response.getBody() instanceof Map);&#10;        Map&lt;String, String&gt; validationErrors = (Map&lt;String, String&gt;) response.getBody();&#10;        assertEquals(&quot;errorMessage&quot;, validationErrors.get(&quot;fieldName&quot;));&#10;    }&#10;&#10;    @Test&#10;    void getUserById_ExistingUserId_ReturnsUserResponse() {&#10;        // Arrange&#10;        int userId = 1;&#10;        UserModel userModel = new UserModel();&#10;        UserResponse userResponse = new UserResponse();&#10;        when(userService.getUserById(userId)).thenReturn(Optional.of(userModel));&#10;        when(userDtoMapper.toResponse(userModel)).thenReturn(userResponse);&#10;&#10;        // Act&#10;        ResponseEntity&lt;UserResponse&gt; response = userController.getUserById(userId);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertEquals(userResponse, response.getBody());&#10;    }&#10;&#10;    @Test&#10;    void getUserById_NonExistingUserId_ReturnsNotFound() {&#10;        // Arrange&#10;        int userId = 1;&#10;        when(userService.getUserById(userId)).thenReturn(Optional.empty());&#10;&#10;        // Act&#10;        ResponseEntity&lt;UserResponse&gt; response = userController.getUserById(userId);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());&#10;        assertNull(response.getBody());&#10;    }&#10;&#10;    // Add more test methods for the remaining controller methods...&#10;&#10;}&#10;```&#10;&#10;In the `getUserById_ExistingUserId_ReturnsUserResponse()` test case, we verify that when an existing `userId` is provided, the `UserController` retrieves the corresponding user from the `UserService`, maps it to a `UserResponse`, and returns a `ResponseEntity` with `HttpStatus.OK` and the user response.&#10;&#10;The `getUserById_NonExistingUserId_ReturnsNotFound()` test case verifies that when a non-existing `userId` is provided, the `UserController` returns a `ResponseEntity` with `HttpStatus.NOT_FOUND` and a `null` body.&#10;&#10;You can add similar test methods for the remaining methods in the `UserController` class, following the same pattern of arranging the necessary mocks, invoking the controller method, and asserting the expected results." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701632374205" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/repository/UserRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/service/UserService.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/userDtoMapper/UserDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/controller/UserControllerTest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/model/UserModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/UserResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/utill/RoleEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/feignClient/StorageServiceClient.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="46fabd">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/dtoMapper/RunSessionDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/RouteModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/request/RunSessionRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/response/RunSessionResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/RunSessionModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/dtoMapper/DtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/RoutePointModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/TrainingModel.java" />
                </list>
              </option>
              <option name="id" value="46fabd" />
              <option name="initiateTms" value="1701527606972" />
              <option name="request" value="Required type:&#10;RouteModel&#10;Provided:&#10;void" />
              <option name="response" value="" />
              <option name="responseDescription" value="It seems that there is a type mismatch error in your code. The expected type is `RouteModel`, but you are providing a `void` value instead. &#10;&#10;To resolve this issue, you need to make sure that you are assigning a `RouteModel` object to the variable or parameter where it is expected. Double-check your code and ensure that you are correctly instantiating or retrieving a `RouteModel` object and passing it to the appropriate location.&#10;&#10;If you can provide more specific code snippets or context, I can assist you further in resolving the type mismatch error." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701527610515" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/RunSessionModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/RouteModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/dtoMapper/RunSessionDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/dtoMapper/DtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/response/RunSessionResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/TrainingModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/request/RunSessionRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/RoutePointModel.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="5d94de">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/test/java/com/runapp/storymanagementservice/controller/StoryControllerTest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/dto/request/StoryRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/StoryModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/StoryService.java" />
                </list>
              </option>
              <option name="id" value="5d94de" />
              <option name="initiateTms" value="1701629341465" />
              <option name="request" value="write all text in one message" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! Here's the content of the `StoryControllerTest.java` file:&#10;&#10;```java&#10;package com.runapp.storymanagementservice.controller;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.runapp.storymanagementservice.dto.request.StoryRequest;&#10;import com.runapp.storymanagementservice.model.StoryModel;&#10;import com.runapp.storymanagementservice.service.StoryService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.hamcrest.Matchers.hasSize;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;public class StoryControllerTest {&#10;&#10;    @Mock&#10;    private StoryService storyService;&#10;&#10;    @InjectMocks&#10;    private StoryController storyController;&#10;&#10;    private MockMvc mockMvc;&#10;&#10;    @BeforeEach&#10;    public void setup() {&#10;        MockitoAnnotations.initMocks(this);&#10;        mockMvc = MockMvcBuilders.standaloneSetup(storyController).build();&#10;    }&#10;&#10;    @Test&#10;    public void testGetAllStories() throws Exception {&#10;        // Prepare test data&#10;        List&lt;StoryModel&gt; stories = new ArrayList&lt;&gt;();&#10;        // Add some StoryModel objects to the stories list&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.getAllStories()).thenReturn(stories);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/stories&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;, hasSize(stories.size())))&#10;                // Add assertions for the properties of the expected response list&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testGetStoryById() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        Optional&lt;StoryModel&gt; story = Optional.of(new StoryModel());&#10;        // Set the properties of the story object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.getStoryById(storyId)).thenReturn(story);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/stories/{storyId}&quot;, storyId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.id&quot;).value(story.get().getId()))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testGetStoryByIdNotFound() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        Optional&lt;StoryModel&gt; story = Optional.empty();&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.getStoryById(storyId)).thenReturn(story);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/stories/{storyId}&quot;, storyId))&#10;                .andExpect(status().isNotFound())&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testCreateStory() throws Exception {&#10;        // Prepare test data&#10;        StoryRequest storyRequest = new StoryRequest();&#10;        // Set the properties of the storyRequest object&#10;&#10;        StoryModel createdStory = new StoryModel();&#10;        // Set the properties of the createdStory object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.createStory(any(StoryModel.class))).thenReturn(createdStory);&#10;&#10;        // Perform the POST request&#10;        mockMvc.perform(post(&quot;/stories&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(asJsonString(storyRequest)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.id&quot;).value(createdStory.getId()))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testUpdateStory() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        StoryRequest storyRequest = new StoryRequest();&#10;        // Set the properties of the storyRequest object&#10;&#10;        StoryModel updatedStory = new StoryModel();&#10;        updatedStory.setId(1);&#10;        // Set the properties of the updatedStory object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.updateStory(any(StoryModel.class))).thenReturn(updatedStory);&#10;&#10;        // Perform the PUT request&#10;        mockMvc.perform(put(&quot;/stories/{storyId}&quot;, storyId)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(asJsonString(storyRequest)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.id&quot;).value(updatedStory.getId()))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testUpdateStoryNotFound() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        StoryRequest storyRequest = new StoryRequest();&#10;        // Set the properties of the storyRequest object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.updateStory(any(StoryModel.class))).thenThrow(new IllegalArgumentException());&#10;&#10;        // Perform the PUT request&#10;        mockMvc.perform(put(&quot;/stories/{storyId}&quot;, storyId)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(asJsonString(storyRequest)))&#10;                .andExpect(status().isNotFound())&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testDeleteStory() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        // Perform the DELETE request&#10;        mockMvc.perform(delete(&quot;/stories/{storyId}&quot;, storyId))&#10;               Here's the remaining part of the `StoryControllerTest.java` file:&#10;&#10;```java&#10;                .andExpect(status().isOk())&#10;                .andReturn();&#10;    }&#10;&#10;    // Helper method to convert an object to JSON string&#10;    private String asJsonString(Object obj) {&#10;        try {&#10;            return new ObjectMapper().writeValueAsString(obj);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;Let me know if you need any further assistance!" />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701629355942" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/dto/request/StoryRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/StoryService.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/StoryRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/controller/StoryController.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/test/java/com/runapp/storymanagementservice/controller/StoryControllerTest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/StoryModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/TaskModel.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="6a0b09">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/controller/TaskController.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/dto/request/TaskRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/StoryModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/TaskModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/StoryService.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/StoryRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/TaskRepository.java" />
                </list>
              </option>
              <option name="id" value="6a0b09" />
              <option name="initiateTms" value="1701629387923" />
              <option name="request" value="Generate tests for class TaskController" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! Here are some test cases you can use to test the `TaskController` class:&#10;&#10;1. Test `getAllTasks()` method:&#10;```java&#10;@Test&#10;public void testGetAllTasks() {&#10;    // Mock the taskService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    List&lt;TaskModel&gt; tasks = new ArrayList&lt;&gt;();&#10;    tasks.add(new TaskModel());&#10;    tasks.add(new TaskModel());&#10;    Mockito.when(taskService.getAllTasks()).thenReturn(tasks);&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, null);&#10;&#10;    // Call the getAllTasks() method&#10;    List&lt;TaskModel&gt; result = taskController.getAllTasks();&#10;&#10;    // Assert the result&#10;    assertEquals(tasks, result);&#10;}&#10;```&#10;&#10;2. Test `getTaskById(int taskId)` method:&#10;```java&#10;@Test&#10;public void testGetTaskById() {&#10;    // Mock the taskService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    TaskModel task = new TaskModel();&#10;    Mockito.when(taskService.getTaskById(1)).thenReturn(Optional.of(task));&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, null);&#10;&#10;    // Call the getTaskById() method&#10;    ResponseEntity&lt;TaskModel&gt; result = taskController.getTaskById(1);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.OK, result.getStatusCode());&#10;    assertEquals(task, result.getBody());&#10;}&#10;&#10;@Test&#10;public void testGetTaskById_TaskNotFound() {&#10;    // Mock the taskService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    Mockito.when(taskService.getTaskById(1)).thenReturn(Optional.empty());&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, null);&#10;&#10;    // Call the getTaskById() method&#10;    ResponseEntity&lt;TaskModel&gt; result = taskController.getTaskById(1);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());&#10;}&#10;```&#10;&#10;3. Test `createTask(TaskRequest taskRequest)` method:&#10;```java&#10;@Test&#10;public void testCreateTask() {&#10;    // Mock the taskService and storyService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    StoryService storyService = Mockito.mock(StoryService.class);&#10;    TaskRequest taskRequest = new TaskRequest();&#10;    taskRequest.setStory_id(1);&#10;    StoryModel storyModel = new StoryModel();&#10;    Mockito.when(storyService.getStoryById(1)).thenReturn(Optional.of(storyModel));&#10;    TaskModel createdTask = new TaskModel();&#10;    Mockito.when(taskService.createTask(Mockito.any(TaskModel.class))).thenReturn(createdTask);&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, storyService);&#10;&#10;    // Call the createTask() method&#10;    ResponseEntity&lt;Object&gt; result = taskController.createTask(taskRequest);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.CREATED, result.getStatusCode());&#10;    assertEquals(createdTask, result.getBody());&#10;}&#10;&#10;@Test&#10;public void testCreateTask_InvalidStoryId() {&#10;    // Mock the taskService and storyService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    StoryService storyService = Mockito.mock(StoryService.class);&#10;    TaskRequest taskRequest = new TaskRequest();&#10;    taskRequest.setStory_id(1);&#10;    Mockito.when(storyService.getStoryById(1)).thenReturn(Optional.empty());&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, storyService);&#10;&#10;    // Call the createTask() method&#10;    ResponseEntity&lt;Object&gt; result = taskController.createTask(taskRequest);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());&#10;    assertEquals(&quot;Story with id 1 not found&quot;, result.getBody());&#10;}&#10;```&#10;&#10;4. Test `updateTask(int taskId, TaskRequest taskRequest)` method:&#10;```java&#10;@Test&#10;public void testUpdateTask() {&#10;    // Mock the taskService and storyService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    StoryService storyService = Mockito.mock(StoryService.class);&#10;    TaskRequest taskRequest = new TaskRequest();&#10;    taskRequest.setStory_id(1);&#10;    StoryModel storyModel = new StoryModel();&#10;    Mockito.when(storyService.getStoryById(1)).thenReturn(Optional.of(storyModel));&#10;    TaskModel updatedTask = new TaskModel();&#10;    Mockito.when(taskService.getTaskById(1)).thenReturn(Optional.of(updatedTask));&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, storyService);&#10;&#10;    // Call the updateTask() method&#10;    ResponseEntity&lt;Object&gt; result = taskController.updateTask(1, taskRequest);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.OK, result.getStatusCode());&#10;    assertEquals(updatedTask, result.getBody());&#10;}&#10;&#10;@Test&#10;public void testUpdateTask_TaskNotFound() {&#10;    // Mock the taskService and storyService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    StoryService storyService = Mockito.mock(StoryService.class);&#10;    TaskRequest taskRequest = new TaskRequest();&#10;    taskRequest.setStory_id(1);&#10;    Mockito.when(taskService.getTaskById(1)).thenReturn(Optional.empty());&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, storyService);&#10;&#10;    // Call the updateTask() method&#10;    ResponseEntity&lt;Object&gt; result = taskController.updateTask(1, taskRequest);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());&#10;    assertEquals(&quot;task with id 1 not found&quot;, result.getBody());&#10;}&#10;&#10;@Test&#10;public void testUpdateTask_InvalidStoryId() {&#10;    //Mock the taskService and storyService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    StoryService storyService = Mockito.mock(StoryService.class);&#10;    TaskRequest taskRequest = new TaskRequest();&#10;    taskRequest.setStory_id(1);&#10;    Mockito.when(taskService.getTaskById(1)).thenReturn(Optional.of(new TaskModel()));&#10;    Mockito.when(storyService.getStoryById(1)).thenReturn(Optional.empty());&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, storyService);&#10;&#10;    // Call the updateTask() method&#10;    ResponseEntity&lt;Object&gt; result = taskController.updateTask(1, taskRequest);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());&#10;    assertEquals(&quot;story with id 1 not found&quot;, result.getBody());&#10;}&#10;```&#10;&#10;5. Test `deleteTask(int taskId)` method:&#10;```java&#10;@Test&#10;public void testDeleteTask() {&#10;    // Mock the taskService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, null);&#10;&#10;    // Call the deleteTask() method&#10;    ResponseEntity&lt;Void&gt; result = taskController.deleteTask(1);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.NO_CONTENT, result.getStatusCode());&#10;}&#10;&#10;@Test&#10;public void testDeleteTask_TaskNotFound() {&#10;    // Mock the taskService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    Mockito.doThrow(new IllegalArgumentException()).when(taskService).deleteTask(1);&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, null);&#10;&#10;    // Call the deleteTask() method&#10;    ResponseEntity&lt;Void&gt; result = taskController.deleteTask(1);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());&#10;}&#10;```&#10;&#10;These test cases cover the basic functionality of the `TaskController` class. You can add more test cases to cover additional scenarios if needed." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701629411398" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/dto/request/TaskRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/StoryService.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/TaskRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/StoryRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/controller/TaskController.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/StoryModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/TaskService.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/TaskModel.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="7156ab">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/controller/UserControllerTest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/UserResponse.java" />
                </list>
              </option>
              <option name="id" value="7156ab" />
              <option name="initiateTms" value="1701633704813" />
              <option name="request" value="How to fix the following error:&#10;Cannot resolve constructor 'FieldError(String, String)'" />
              <option name="response" value="" />
              <option name="responseDescription" value="The error &quot;Cannot resolve constructor 'FieldError(String, String)'&quot; occurs because the `FieldError` class does not have a constructor that takes two `String` arguments. &#10;&#10;To fix this error, you need to use the appropriate constructor of the `FieldError` class. The constructor of `FieldError` requires four arguments: `String objectName`, `String field`, `String defaultMessage`, and `boolean bindingFailure`. &#10;&#10;Here's an updated version of the `createUser_InvalidUserRequest_ReturnsBadRequestWithValidationErrors` test method that uses the correct constructor:&#10;&#10;```java&#10;@Test&#10;void createUser_InvalidUserRequest_ReturnsBadRequestWithValidationErrors() {&#10;    // Arrange&#10;    UserRequest userRequest = new UserRequest();&#10;    BindingResult bindingResult = mock(BindingResult.class);&#10;    when(bindingResult.hasErrors()).thenReturn(true);&#10;    when(bindingResult.getFieldErrors()).thenReturn(Collections.singletonList(new FieldError(&#10;            &quot;objectName&quot;, // Replace &quot;objectName&quot; with the actual object name&#10;            &quot;fieldName&quot;, // Replace &quot;fieldName&quot; with the actual field name&#10;            &quot;errorMessage&quot;, // Replace &quot;errorMessage&quot; with the actual error message&#10;            false // Replace false with the appropriate value for bindingFailure&#10;    )));&#10;&#10;    // Act&#10;    ResponseEntity&lt;Object&gt; response = userController.createUser(userRequest, bindingResult);&#10;&#10;    // Assert&#10;    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());&#10;    assertTrue(response.getBody() instanceof Map);&#10;    Map&lt;String, String&gt; validationErrors = (Map&lt;String, String&gt;) response.getBody();&#10;    assertEquals(&quot;errorMessage&quot;, validationErrors.get(&quot;fieldName&quot;));&#10;}&#10;```&#10;&#10;Make sure to replace `&quot;objectName&quot;`, `&quot;fieldName&quot;`, `&quot;errorMessage&quot;`, and `false` with the actual values for your specific use case." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701633709931" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/repository/UserRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/service/UserService.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/userDtoMapper/UserDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/test/java/com/runapp/profileservice/controller/UserControllerTest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/model/UserModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/UserResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/utill/RoleEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/feignClient/StorageServiceClient.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/StorageServiceResponse.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="75b5a3">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/test/java/com/runapp/shoesservice/controller/ShoesController.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/ShoesRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/ShoesResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/model/ShoesModel.java" />
                </list>
              </option>
              <option name="id" value="75b5a3" />
              <option name="initiateTms" value="1701631364429" />
              <option name="request" value="more" />
              <option name="response" value="" />
              <option name="responseDescription" value="Certainly! Here are a few more test methods you can add to the `ShoesControllerTest` class to further test the `ShoesController` class:&#10;&#10;```java&#10;@Test&#10;void testGetAllShoes() {&#10;    // Arrange&#10;    List&lt;ShoesModel&gt; shoesModels = new ArrayList&lt;&gt;();&#10;    shoesModels.add(new ShoesModel());&#10;    when(shoesService.getAllShoes()).thenReturn(shoesModels);&#10;&#10;    List&lt;ShoesResponse&gt; expectedResponses = new ArrayList&lt;&gt;();&#10;    expectedResponses.add(new ShoesResponse());&#10;    when(shoesDtoMapper.toResponse(any(ShoesModel.class))).thenReturn(new ShoesResponse());&#10;&#10;    // Act&#10;    List&lt;ShoesResponse&gt; actualResponses = shoesController.getAllShoes();&#10;&#10;    // Assert&#10;    assertEquals(expectedResponses.size(), actualResponses.size());&#10;    verify(shoesService, times(1)).getAllShoes();&#10;    verify(shoesDtoMapper, times(1)).toResponse(any(ShoesModel.class));&#10;}&#10;&#10;@Test&#10;void testGetShoesById() {&#10;    // Arrange&#10;    Long id = 1L;&#10;    ShoesModel shoesModel = new ShoesModel();&#10;    when(shoesService.getShoesById(id)).thenReturn(Optional.of(shoesModel));&#10;&#10;    ShoesResponse expectedResponse = new ShoesResponse();&#10;    when(shoesDtoMapper.toResponse(shoesModel)).thenReturn(expectedResponse);&#10;&#10;    // Act&#10;    ResponseEntity&lt;ShoesResponse&gt; responseEntity = shoesController.getShoesById(id);&#10;&#10;    // Assert&#10;    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());&#10;    assertEquals(expectedResponse, responseEntity.getBody());&#10;    verify(shoesService, times(1)).getShoesById(id);&#10;    verify(shoesDtoMapper, times(1)).toResponse(shoesModel);&#10;}&#10;&#10;@Test&#10;void testCreateShoes() {&#10;    // Arrange&#10;    ShoesRequest shoesRequest = new ShoesRequest();&#10;    ShoesModel shoesModel = new ShoesModel();&#10;    when(shoesDtoMapper.toModel(shoesRequest)).thenReturn(shoesModel);&#10;&#10;    ShoesModel createdShoes = new ShoesModel();&#10;    when(shoesService.createShoes(shoesModel)).thenReturn(createdShoes);&#10;&#10;    ShoesResponse expectedResponse = new ShoesResponse();&#10;    when(shoesDtoMapper.toResponse(createdShoes)).thenReturn(expectedResponse);&#10;&#10;    // Act&#10;    ResponseEntity&lt;ShoesResponse&gt; responseEntity = shoesController.createShoes(shoesRequest);&#10;&#10;    // Assert&#10;    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());&#10;    assertEquals(expectedResponse, responseEntity.getBody());&#10;    verify(shoesDtoMapper, times(1)).toModel(shoesRequest);&#10;    verify(shoesService, times(1)).createShoes(shoesModel);&#10;    verify(shoesDtoMapper, times(1)).toResponse(createdShoes);&#10;}&#10;&#10;@Test&#10;void testDeleteShoes() {&#10;    // Arrange&#10;    Long id = 1L;&#10;&#10;    // Act&#10;    ResponseEntity&lt;DeleteResponse&gt; responseEntity = shoesController.deleteShoes(id);&#10;&#10;    // Assert&#10;    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());&#10;    verify(shoesService, times(1)).deleteShoes(id);&#10;}&#10;&#10;// Add more test methods for other controller methods&#10;```&#10;&#10;In these additional test methods, we cover the remaining controller methods such as `getAllShoes`, `getShoesById`, `createShoes`, and `deleteShoes`. We set up the necessary mock responses and assert the expected results.&#10;&#10;Feel free to add more test methods for other controller methods following a similar pattern." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701631373852" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/model/ShoesModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/shoesDtoMapper/ShoesDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/controller/ShoesController.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/utill/ConditionShoesEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/ShoesResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/ShoesRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/StorageServiceResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/ShoesDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/service/ShoesService.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/repository/ShoesRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/test/java/com/runapp/shoesservice/controller/ShoesController.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/feignClient/StorageServiceClient.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="7aba75">
          <value>
            <ChatHistoryModel>
              <option name="id" value="7aba75" />
              <option name="initiateTms" value="1702059712154" />
              <option name="request" value="Generate tests for class DiscoveryServiceApplication" />
              <option name="response" value="" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Diskovery-Service/src/main/java/com/example/discoveryservice/DiscoveryServiceApplication.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="905eab">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/controller/TaskController.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/dto/request/TaskRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/StoryModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/TaskModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/StoryService.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/StoryRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/TaskRepository.java" />
                </list>
              </option>
              <option name="id" value="905eab" />
              <option name="initiateTms" value="1701629295261" />
              <option name="request" value="Generate tests for class TaskController" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! Here are some test cases you can use to test the `TaskController` class:&#10;&#10;1. Test `getAllTasks()` method:&#10;```java&#10;@Test&#10;public void testGetAllTasks() {&#10;    // Mock the taskService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    List&lt;TaskModel&gt; tasks = new ArrayList&lt;&gt;();&#10;    tasks.add(new TaskModel());&#10;    tasks.add(new TaskModel());&#10;    Mockito.when(taskService.getAllTasks()).thenReturn(tasks);&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, null);&#10;&#10;    // Call the getAllTasks() method&#10;    List&lt;TaskModel&gt; result = taskController.getAllTasks();&#10;&#10;    // Assert the result&#10;    assertEquals(tasks, result);&#10;}&#10;```&#10;&#10;2. Test `getTaskById(int taskId)` method:&#10;```java&#10;@Test&#10;public void testGetTaskById() {&#10;    // Mock the taskService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    TaskModel task = new TaskModel();&#10;    Mockito.when(taskService.getTaskById(1)).thenReturn(Optional.of(task));&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, null);&#10;&#10;    // Call the getTaskById() method&#10;    ResponseEntity&lt;TaskModel&gt; result = taskController.getTaskById(1);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.OK, result.getStatusCode());&#10;    assertEquals(task, result.getBody());&#10;}&#10;&#10;@Test&#10;public void testGetTaskById_TaskNotFound() {&#10;    // Mock the taskService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    Mockito.when(taskService.getTaskById(1)).thenReturn(Optional.empty());&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, null);&#10;&#10;    // Call the getTaskById() method&#10;    ResponseEntity&lt;TaskModel&gt; result = taskController.getTaskById(1);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());&#10;}&#10;```&#10;&#10;3. Test `createTask(TaskRequest taskRequest)` method:&#10;```java&#10;@Test&#10;public void testCreateTask() {&#10;    // Mock the taskService and storyService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    StoryService storyService = Mockito.mock(StoryService.class);&#10;    TaskRequest taskRequest = new TaskRequest();&#10;    taskRequest.setStory_id(1);&#10;    StoryModel storyModel = new StoryModel();&#10;    Mockito.when(storyService.getStoryById(1)).thenReturn(Optional.of(storyModel));&#10;    TaskModel createdTask = new TaskModel();&#10;    Mockito.when(taskService.createTask(Mockito.any(TaskModel.class))).thenReturn(createdTask);&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, storyService);&#10;&#10;    // Call the createTask() method&#10;    ResponseEntity&lt;Object&gt; result = taskController.createTask(taskRequest);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.CREATED, result.getStatusCode());&#10;    assertEquals(createdTask, result.getBody());&#10;}&#10;&#10;@Test&#10;public void testCreateTask_InvalidStoryId() {&#10;    // Mock the taskService and storyService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    StoryService storyService = Mockito.mock(StoryService.class);&#10;    TaskRequest taskRequest = new TaskRequest();&#10;    taskRequest.setStory_id(1);&#10;    Mockito.when(storyService.getStoryById(1)).thenReturn(Optional.empty());&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, storyService);&#10;&#10;    // Call the createTask() method&#10;    ResponseEntity&lt;Object&gt; result = taskController.createTask(taskRequest);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());&#10;    assertEquals(&quot;Story with id 1 not found&quot;, result.getBody());&#10;}&#10;```&#10;&#10;4. Test `updateTask(int taskId, TaskRequest taskRequest)` method:&#10;```java&#10;@Test&#10;public void testUpdateTask() {&#10;    // Mock the taskService and storyService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    StoryService storyService = Mockito.mock(StoryService.class);&#10;    TaskRequest taskRequest = new TaskRequest();&#10;    taskRequest.setStory_id(1);&#10;    StoryModel storyModel = new StoryModel();&#10;    Mockito.when(storyService.getStoryById(1)).thenReturn(Optional.of(storyModel));&#10;    TaskModel updatedTask = new TaskModel();&#10;    Mockito.when(taskService.getTaskById(1)).thenReturn(Optional.of(updatedTask));&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, storyService);&#10;&#10;    // Call the updateTask() method&#10;    ResponseEntity&lt;Object&gt; result = taskController.updateTask(1, taskRequest);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.OK, result.getStatusCode());&#10;    assertEquals(updatedTask, result.getBody());&#10;}&#10;&#10;@Test&#10;public void testUpdateTask_TaskNotFound() {&#10;    // Mock the taskService and storyService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    StoryService storyService = Mockito.mock(StoryService.class);&#10;    TaskRequest taskRequest = new TaskRequest();&#10;    taskRequest.setStory_id(1);&#10;    Mockito.when(taskService.getTaskById(1)).thenReturn(Optional.empty());&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, storyService);&#10;&#10;    // Call the updateTask() method&#10;    ResponseEntity&lt;Object&gt; result = taskController.updateTask(1, taskRequest);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());&#10;    assertEquals(&quot;task with id 1 not found&quot;, result.getBody());&#10;}&#10;&#10;@Test&#10;public void testUpdateTask_InvalidStoryId() {&#10;    //Mock the taskService and storyService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    StoryService storyService = Mockito.mock(StoryService.class);&#10;    TaskRequest taskRequest = new TaskRequest();&#10;    taskRequest.setStory_id(1);&#10;    Mockito.when(taskService.getTaskById(1)).thenReturn(Optional.of(new TaskModel()));&#10;    Mockito.when(storyService.getStoryById(1)).thenReturn(Optional.empty());&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, storyService);&#10;&#10;    // Call the updateTask() method&#10;    ResponseEntity&lt;Object&gt; result = taskController.updateTask(1, taskRequest);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());&#10;    assertEquals(&quot;story with id 1 not found&quot;, result.getBody());&#10;}&#10;```&#10;&#10;5. Test `deleteTask(int taskId)` method:&#10;```java&#10;@Test&#10;public void testDeleteTask() {&#10;    // Mock the taskService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, null);&#10;&#10;    // Call the deleteTask() method&#10;    ResponseEntity&lt;Void&gt; result = taskController.deleteTask(1);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.NO_CONTENT, result.getStatusCode());&#10;}&#10;&#10;@Test&#10;public void testDeleteTask_TaskNotFound() {&#10;    // Mock the taskService&#10;    TaskService taskService = Mockito.mock(TaskService.class);&#10;    Mockito.doThrow(new IllegalArgumentException()).when(taskService).deleteTask(1);&#10;&#10;    // Create the TaskController instance&#10;    TaskController taskController = new TaskController(taskService, null);&#10;&#10;    // Call the deleteTask() method&#10;    ResponseEntity&lt;Void&gt; result = taskController.deleteTask(1);&#10;&#10;    // Assert the result&#10;    assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());&#10;}&#10;```&#10;&#10;These test cases cover the basic functionality of the `TaskController` class. You can add more test cases to cover additional scenarios if needed." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701629322981" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/dto/request/TaskRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/StoryService.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/TaskRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/StoryRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/controller/TaskController.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/StoryModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/TaskService.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/TaskModel.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="92bd6b">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/test/java/com/runapp/storymanagementservice/controller/StoryControllerTest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/StoryModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/StoryService.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/TaskModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/StoryRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/dto/request/StoryRequest.java" />
                </list>
              </option>
              <option name="id" value="92bd6b" />
              <option name="initiateTms" value="1701628887602" />
              <option name="request" value="write on hte junit5" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! Here's an updated version of the `StoryControllerTest` class using JUnit 5:&#10;&#10;```java&#10;package com.runapp.storymanagementservice.controller;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.runapp.storymanagementservice.dto.request.StoryRequest;&#10;import com.runapp.storymanagementservice.model.StoryModel;&#10;import com.runapp.storymanagementservice.service.StoryService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;public class StoryControllerTest {&#10;&#10;    @Mock&#10;    private StoryService storyService;&#10;&#10;    @InjectMocks&#10;    private StoryController storyController;&#10;&#10;    private MockMvc mockMvc;&#10;&#10;    @BeforeEach&#10;    public void setup() {&#10;        MockitoAnnotations.initMocks(this);&#10;        mockMvc = MockMvcBuilders.standaloneSetup(storyController).build();&#10;    }&#10;&#10;    @Test&#10;    public void testGetAllStories() throws Exception {&#10;        // Prepare test data&#10;        List&lt;StoryModel&gt; stories = new ArrayList&lt;&gt;();&#10;        // Add some StoryModel objects to the stories list&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.getAllStories()).thenReturn(stories);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/stories&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;, hasSize(stories.size())))&#10;                // Add assertions for the properties of the expected response list&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testGetStoryById() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        Optional&lt;StoryModel&gt; story = Optional.of(new StoryModel());&#10;        // Set the properties of the story object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.getStoryById(storyId)).thenReturn(story);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/stories/{storyId}&quot;, storyId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.id&quot;).value(story.get().getId()))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testGetStoryByIdNotFound() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        Optional&lt;StoryModel&gt; story = Optional.empty();&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.getStoryById(storyId)).thenReturn(story);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/stories/{storyId}&quot;, storyId))&#10;                .andExpect(status().isNotFound())&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testCreateStory() throws Exception {&#10;        // Prepare test data&#10;        StoryRequest storyRequest = new StoryRequest();&#10;        // Set the properties of the storyRequest object&#10;&#10;        StoryModel createdStory = new StoryModel();&#10;        // Set the properties of the createdStory object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.createStory(any(StoryModel.class))).thenReturn(createdStory);&#10;&#10;        // Perform the POST request&#10;        mockMvc.perform(post(&quot;/stories&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(asJsonString(storyRequest)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.id&quot;).value(createdStory.getId()))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testUpdateStory() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        StoryRequest storyRequest = new StoryRequest();&#10;        // Set the properties of the storyRequest object&#10;&#10;        StoryModel updatedStory = new StoryModel();&#10;        // Set the properties of the updatedStory object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.updateStory(any(StoryModel.class))).thenReturn(updatedStory);&#10;&#10;        // Perform the PUT request&#10;        mockMvc.perform(put(&quot;/stories/{storyId}&quot;, storyId)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(asJsonString(storyRequest)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.id&quot;).value(updatedStory.getId()))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testUpdateStoryNotFound() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        StoryRequest storyRequest = new StoryRequest();&#10;        // Set the properties of the storyRequest object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.updateStory(any(StoryModel.class))).thenThrow(new IllegalArgumentException());&#10;&#10;        // Perform the PUT request&#10;        mockMvc.perform(put(&quot;/stories/{storyId}&quot;, storyId)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(asJsonString(storyRequest)))&#10;                .andExpect(status().isNotFound())&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testDeleteStory() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        // Perform the DELETE request&#10;        mockMvc.perform(delete(&quot;/stories/{storyId}&quot;, storyId))&#10;                .andExpect(status().isOk())&#10;                .andReturn();&#10;    }&#10;&#10;    // Helper method to convert an object to JSON string&#10;    private static String asJsonString(Object obj) {&#10;        try {&#10;            ObjectMapper objectMapper = new ObjectMapper();&#10;            return objectMapper.writeValueAsString(obj);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;In this updated version, I've made the following changes:&#10;&#10;1. Updated the import statements to use the appropriate JUnit 5 annotations and classes.&#10;2. Added the `@BeforeEach` annotation to the `setup()` method to initialize the mocks using `MockitoAnnotations.initMocks(this)`.&#10;3. Updated the assertions for JSON response using the `jsonPath()` method.&#10;4. Added a helper method `asJsonString()` to convert objects to JSON strings for request content.&#10;&#10;Please make sure to import the necessary dependencies for JUnit 5 and Jackson ObjectMapper. Let me know if you need any further assistance!" />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701628908508" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/dto/request/StoryRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/StoryService.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/StoryRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/controller/StoryController.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/test/java/com/runapp/storymanagementservice/controller/StoryControllerTest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/StoryModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/TaskModel.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="93338e">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/controller/ShoesController.java" />
                </list>
              </option>
              <option name="id" value="93338e" />
              <option name="initiateTms" value="1701631244514" />
              <option name="request" value="Generate tests for class ShoesController" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! Here's an example of how you can generate tests for the `ShoesController` class using JUnit and Mockito:&#10;&#10;```java&#10;import com.runapp.shoesservice.dto.request.ShoesRequest;&#10;import com.runapp.shoesservice.dto.response.ShoesResponse;&#10;import com.runapp.shoesservice.model.ShoesModel;&#10;import com.runapp.shoesservice.service.ShoesService;&#10;import com.runapp.shoesservice.dto.shoesDtoMapper.ShoesDtoMapper;&#10;import com.runapp.shoesservice.feignClient.StorageServiceClient;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertEquals;&#10;import static org.mockito.Mockito.*;&#10;&#10;class ShoesControllerTest {&#10;&#10;    @Mock&#10;    private ShoesService shoesService;&#10;&#10;    @Mock&#10;    private ShoesDtoMapper shoesDtoMapper;&#10;&#10;    @Mock&#10;    private StorageServiceClient storageServiceClient;&#10;&#10;    @InjectMocks&#10;    private ShoesController shoesController;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Test&#10;    void testGetAllShoes() {&#10;        // Arrange&#10;        List&lt;ShoesModel&gt; shoesModels = new ArrayList&lt;&gt;();&#10;        shoesModels.add(new ShoesModel());&#10;        when(shoesService.getAllShoes()).thenReturn(shoesModels);&#10;&#10;        List&lt;ShoesResponse&gt; expectedResponses = new ArrayList&lt;&gt;();&#10;        expectedResponses.add(new ShoesResponse());&#10;        when(shoesDtoMapper.toResponse(any(ShoesModel.class))).thenReturn(new ShoesResponse());&#10;&#10;        // Act&#10;        List&lt;ShoesResponse&gt; actualResponses = shoesController.getAllShoes();&#10;&#10;        // Assert&#10;        assertEquals(expectedResponses.size(), actualResponses.size());&#10;        verify(shoesService, times(1)).getAllShoes();&#10;        verify(shoesDtoMapper, times(1)).toResponse(any(ShoesModel.class));&#10;    }&#10;&#10;    @Test&#10;    void testGetShoesById() {&#10;        // Arrange&#10;        Long id = 1L;&#10;        ShoesModel shoesModel = new ShoesModel();&#10;        when(shoesService.getShoesById(id)).thenReturn(Optional.of(shoesModel));&#10;&#10;        ShoesResponse expectedResponse = new ShoesResponse();&#10;        when(shoesDtoMapper.toResponse(shoesModel)).thenReturn(expectedResponse);&#10;&#10;        // Act&#10;        ResponseEntity&lt;ShoesResponse&gt; responseEntity = shoesController.getShoesById(id);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());&#10;        assertEquals(expectedResponse, responseEntity.getBody());&#10;        verify(shoesService, times(1)).getShoesById(id);&#10;        verify(shoesDtoMapper, times(1)).toResponse(shoesModel);&#10;    }&#10;&#10;    @Test&#10;    void testCreateShoes() {&#10;        // Arrange&#10;        ShoesRequest shoesRequest = new ShoesRequest();&#10;        ShoesModel shoesModel = new ShoesModel();&#10;        when(shoesDtoMapper.toModel(shoesRequest)).thenReturn(shoesModel);&#10;&#10;        ShoesModel createdShoes = new ShoesModel();&#10;        when(shoesService.createShoes(shoesModel)).thenReturn(createdShoes);&#10;&#10;        ShoesResponse expectedResponse = new ShoesResponse();&#10;        when(shoesDtoMapper.toResponse(createdShoes)).thenReturn(expectedResponse);&#10;&#10;        // Act&#10;        ResponseEntity&lt;ShoesResponse&gt; responseEntity = shoesController.createShoes(shoesRequest);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());&#10;        assertEquals(expectedResponse, responseEntity.getBody());&#10;        verify(shoesDtoMapper, times(1)).toModel(shoesRequest);&#10;        verify(shoesService, times(1)).createShoes(shoesModel);&#10;        verify(shoesDtoMapper, times(1)).toResponse(createdShoes);&#10;    }&#10;&#10;    // Add more test methods for other controller methods&#10;&#10;}&#10;```&#10;&#10;In this example, we use Mockito to mock the dependencies (`ShoesService`, `ShoesDtoMapper`, and `StorageServiceClient`) of the `ShoesController` class. We then write test methods to verify the behavior of each controller method by setting up the necessary mock responses and asserting the expected results.&#10;&#10;You can add more test methods for other controller methods following a similar pattern." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701631261578" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/model/ShoesModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/shoesDtoMapper/ShoesDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/controller/ShoesController.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/utill/ConditionShoesEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/ShoesResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/ShoesRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/StorageServiceResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/ShoesDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/service/ShoesService.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/repository/ShoesRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/test/java/com/runapp/shoesservice/controller/ShoesController.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/feignClient/StorageServiceClient.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="957e49">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                </list>
              </option>
              <option name="id" value="957e49" />
              <option name="initiateTms" value="1701632156498" />
              <option name="request" value="Generate tests for class UserController" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! Here's an example of how you can generate tests for the `UserController` class:&#10;&#10;```java&#10;import com.runapp.profileservice.dto.request.UserRequest;&#10;import com.runapp.profileservice.dto.response.UserResponse;&#10;import com.runapp.profileservice.model.UserModel;&#10;import com.runapp.profileservice.service.UserService;&#10;import com.runapp.profileservice.dto.userDtoMapper.UserDtoMapper;&#10;import com.runapp.profileservice.feignClient.StorageServiceClient;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.validation.BindingResult;&#10;&#10;import java.util.*;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;class UserControllerTest {&#10;&#10;    @Mock&#10;    private UserService userService;&#10;&#10;    @Mock&#10;    private UserDtoMapper userDtoMapper;&#10;&#10;    @Mock&#10;    private StorageServiceClient storageServiceClient;&#10;&#10;    @InjectMocks&#10;    private UserController userController;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Test&#10;    void createUser_ValidUserRequest_ReturnsCreatedUserResponse() {&#10;        // Arrange&#10;        UserRequest userRequest = new UserRequest();&#10;        UserModel userModel = new UserModel();&#10;        UserResponse userResponse = new UserResponse();&#10;        when(userDtoMapper.toModel(userRequest)).thenReturn(userModel);&#10;        when(userService.createUser(userModel)).thenReturn(userModel);&#10;        when(userDtoMapper.toResponse(userModel)).thenReturn(userResponse);&#10;&#10;        // Act&#10;        ResponseEntity&lt;Object&gt; response = userController.createUser(userRequest, mock(BindingResult.class));&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.CREATED, response.getStatusCode());&#10;        assertEquals(userResponse, response.getBody());&#10;    }&#10;&#10;    @Test&#10;    void createUser_InvalidUserRequest_ReturnsBadRequestWithValidationErrors() {&#10;        // Arrange&#10;        UserRequest userRequest = new UserRequest();&#10;        BindingResult bindingResult = mock(BindingResult.class);&#10;        when(bindingResult.hasErrors()).thenReturn(true);&#10;        when(bindingResult.getFieldErrors()).thenReturn(Collections.singletonList(new FieldError(&quot;fieldName&quot;, &quot;errorMessage&quot;)));&#10;&#10;        // Act&#10;        ResponseEntity&lt;Object&gt; response = userController.createUser(userRequest, bindingResult);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());&#10;        assertTrue(response.getBody() instanceof Map);&#10;        Map&lt;String, String&gt; validationErrors = (Map&lt;String, String&gt;) response.getBody();&#10;        assertEquals(&quot;errorMessage&quot;, validationErrors.get(&quot;fieldName&quot;));&#10;    }&#10;&#10;    // Add more test methods for other controller methods...&#10;&#10;}&#10;```&#10;&#10;In these tests, we are using Mockito to mock the dependencies (`UserService`, `UserDtoMapper`, and `StorageServiceClient`) of the `UserController` class. We then inject these mocks into the `UserController` using the `@InjectMocks` annotation.&#10;&#10;The `setUp()` method is used to initialize the mocks before each test case.&#10;&#10;The `createUser_ValidUserRequest_ReturnsCreatedUserResponse()` test case verifies that when a valid `UserRequest` is provided, the `UserController` creates a new user, maps the created user to a `UserResponse`, and returns a `ResponseEntity` with the created user and `HttpStatus.CREATED`.&#10;&#10;The `createUser_InvalidUserRequest_ReturnsBadRequestWithValidationErrors()` test case verifies that when an invalid `UserRequest` is provided, the `UserController` returns a `ResponseEntity` with `HttpStatus.BAD_REQUEST` and a map of validation errors.&#10;&#10;You can add more test methods for other methods in the `UserController` class following a similar pattern." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701632168383" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/repository/UserRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/service/UserService.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/userDtoMapper/UserDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/model/UserModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/UserResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/utill/RoleEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/feignClient/StorageServiceClient.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/StorageServiceResponse.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="b5b8bb">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/dtoMapper/RunSessionDtoMapper.java" />
                </list>
              </option>
              <option name="id" value="b5b8bb" />
              <option name="initiateTms" value="1701527596877" />
              <option name="request" value="df" />
              <option name="response" value="" />
              <option name="responseDescription" value="I'm sorry, but I couldn't understand your request. Can you please provide more information or clarify what you mean by &quot;df&quot;?" />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701527598935" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/dtoMapper/RunSessionDtoMapper.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="b76026">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                </list>
              </option>
              <option name="id" value="b76026" />
              <option name="initiateTms" value="1701632181097" />
              <option name="request" value="do test every controller" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! To test each controller in the `UserController.java` file, you can follow these steps:&#10;&#10;1. Create a test class for the `UserController` called `UserControllerTest`.&#10;2. Add the necessary imports for testing, such as `org.junit.jupiter.api.Test`, `org.springframework.beans.factory.annotation.Autowired`, `org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest`, `org.springframework.boot.test.mock.mockito.MockBean`, `org.springframework.http.MediaType`, `org.springframework.test.web.servlet.MockMvc`, `org.springframework.test.web.servlet.request.MockMvcRequestBuilders`, `org.springframework.test.web.servlet.result.MockMvcResultMatchers`, and `org.springframework.test.web.servlet.setup.MockMvcBuilders`.&#10;3. Annotate the test class with `@WebMvcTest(UserController.class)` to enable Spring MVC testing for the `UserController`.&#10;4. Autowire the `MockMvc` object to perform HTTP requests and receive responses.&#10;5. Create a mock bean for the `UserService` and `UserDtoMapper` classes using `@MockBean` annotation.&#10;6. Write individual test methods for each controller method, using the `@Test` annotation.&#10;7. In each test method, use the `MockMvc` object to perform HTTP requests and assert the expected responses using `MockMvcResultMatchers`.&#10;8. Use `Mockito` to mock the necessary dependencies and define their behavior in each test method.&#10;9. Run the test class to execute the tests and verify the functionality of each controller method.&#10;&#10;Here's an example of how the test class for the `UserController` could look like:&#10;&#10;```java&#10;import com.runapp.profileservice.controller.UserController;&#10;import com.runapp.profileservice.dto.request.UserRequest;&#10;import com.runapp.profileservice.dto.response.UserResponse;&#10;import com.runapp.profileservice.model.UserModel;&#10;import com.runapp.profileservice.service.UserService;&#10;import com.runapp.profileservice.dto.userDtoMapper.UserDtoMapper;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.boot.test.mock.mockito.MockBean;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;&#10;import org.springframework.test.web.servlet.result.MockMvcResultMatchers;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.Mockito.when;&#10;&#10;@WebMvcTest(UserController.class)&#10;public class UserControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @MockBean&#10;    private UserService userService;&#10;&#10;    @MockBean&#10;    private UserDtoMapper userDtoMapper;&#10;&#10;    @Test&#10;    public void testCreateUser() throws Exception {&#10;        UserRequest userRequest = new UserRequest();&#10;        userRequest.setName(&quot;John Doe&quot;);&#10;        userRequest.setEmail(&quot;john.doe@example.com&quot;);&#10;&#10;        UserModel userModel = new UserModel();&#10;        userModel.setId(1);&#10;        userModel.setName(&quot;John Doe&quot;);&#10;        userModel.setEmail(&quot;john.doe@example.com&quot;);&#10;&#10;        UserResponse userResponse = new UserResponse();&#10;        userResponse.setId(1);&#10;        userResponse.setName(&quot;John Doe&quot;);&#10;        userResponse.setEmail(&quot;john.doe@example.com&quot;);&#10;&#10;        when(userService.createUser(any(UserModel.class))).thenReturn(userModel);&#10;        when(userDtoMapper.toResponse(any(UserModel.class))).thenReturn(userResponse);&#10;&#10;        mockMvc.perform(MockMvcRequestBuilders.post(&quot;/users&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(&quot;{\&quot;name\&quot;:\&quot;John Doe\&quot;,\&quot;email\&quot;:\&quot;john.doe@example.com\&quot;}&quot;))&#10;                .andExpect(MockMvcResultMatchers.status().isCreated())&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.id&quot;).value(1))&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.name&quot;).value(&quot;John Doe&quot;))&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.email&quot;).value(&quot;john.doe@example.com&quot;));&#10;    }&#10;&#10;    @Test&#10;    public void testGetUserById() throws Exception {&#10;        UserModel userModel = new UserModel();&#10;        userModel.setId(1);&#10;        userModel.setName(&quot;John Doe&quot;);&#10;        userModel.setEmail(&quot;john.doe@example.com&quot;);&#10;&#10;        UserResponse userResponse = new UserResponse();&#10;        userResponse.setId(1);&#10;        userResponse.setName(&quot;John Doe&quot;);&#10;        userResponse.setEmail(&quot;john.doe@example.com&quot;);&#10;&#10;        when(userService.getUserById(1)).thenReturn(Optional.of(userModel));&#10;        when(userDtoMapper.toResponse(userModel)).thenReturn(userResponse);&#10;&#10;        mockMvc.perform(MockMvcRequestBuilders.get(&quot;/users/1&quot;))&#10;                .andExpect(MockMvcResultMatchers.status().isOk())&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.id&quot;).value(1))&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.name&quot;).value(&quot;John Doe&quot;))&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.email&quot;).value(&quot;john.doe@example.com&quot;));&#10;    }&#10;&#10;    // Add more test methods for other controller methods&#10;&#10;}&#10;```&#10;&#10;You can continue writing test methods for the remaining controller methods in a similar manner. Make sure to mock the necessary dependencies and define their behavior to simulate different scenarios and test the controller's functionality thoroughly." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701632194322" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/repository/UserRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/service/UserService.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/userDtoMapper/UserDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/model/UserModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/UserResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/utill/RoleEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/feignClient/StorageServiceClient.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/StorageServiceResponse.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="b8792c">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/test/java/com/runapp/shoesservice/controller/ShoesController.java" />
                </list>
              </option>
              <option name="id" value="b8792c" />
              <option name="initiateTms" value="1701631453089" />
              <option name="request" value="package com.runapp.shoesservice.controller;&#10;&#10;import com.runapp.shoesservice.dto.request.ShoesRequest;&#10;import com.runapp.shoesservice.dto.response.DeleteResponse;&#10;import com.runapp.shoesservice.dto.response.ShoesResponse;&#10;import com.runapp.shoesservice.model.ShoesModel;&#10;import com.runapp.shoesservice.service.ShoesService;&#10;import com.runapp.shoesservice.dto.shoesDtoMapper.ShoesDtoMapper;&#10;import com.runapp.shoesservice.feignClient.StorageServiceClient;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertEquals;&#10;import static org.mockito.Mockito.*;&#10;&#10;class ShoesControllerTest {&#10;&#10;    @Mock&#10;    private ShoesService shoesService;&#10;&#10;    @Mock&#10;    private ShoesDtoMapper shoesDtoMapper;&#10;&#10;    @Mock&#10;    private StorageServiceClient storageServiceClient;&#10;&#10;    @InjectMocks&#10;    private ShoesController shoesController;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Test&#10;    void testGetAllShoes() {&#10;        // Arrange&#10;        List&lt;ShoesModel&gt; shoesModels = new ArrayList&lt;&gt;();&#10;        shoesModels.add(new ShoesModel());&#10;        when(shoesService.getAllShoes()).thenReturn(shoesModels);&#10;&#10;        List&lt;ShoesResponse&gt; expectedResponses = new ArrayList&lt;&gt;();&#10;        expectedResponses.add(new ShoesResponse());&#10;        when(shoesDtoMapper.toResponse(any(ShoesModel.class))).thenReturn(new ShoesResponse());&#10;&#10;        // Act&#10;        List&lt;ShoesResponse&gt; actualResponses = shoesController.getAllShoes();&#10;&#10;        // Assert&#10;        assertEquals(expectedResponses.size(), actualResponses.size());&#10;        verify(shoesService, times(1)).getAllShoes();&#10;        verify(shoesDtoMapper, times(1)).toResponse(any(ShoesModel.class));&#10;    }&#10;&#10;    @Test&#10;    void testGetShoesById() {&#10;        // Arrange&#10;        Long id = 1L;&#10;        ShoesModel shoesModel = new ShoesModel();&#10;        when(shoesService.getShoesById(id)).thenReturn(Optional.of(shoesModel));&#10;&#10;        ShoesResponse expectedResponse = new ShoesResponse();&#10;        when(shoesDtoMapper.toResponse(shoesModel)).thenReturn(expectedResponse);&#10;&#10;        // Act&#10;        ResponseEntity&lt;ShoesResponse&gt; responseEntity = shoesController.getShoesById(id);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());&#10;        assertEquals(expectedResponse, responseEntity.getBody());&#10;        verify(shoesService, times(1)).getShoesById(id);&#10;        verify(shoesDtoMapper, times(1)).toResponse(shoesModel);&#10;    }&#10;&#10;    @Test&#10;    void testCreateShoes() {&#10;        // Arrange&#10;        ShoesRequest shoesRequest = new ShoesRequest();&#10;        ShoesModel shoesModel = new ShoesModel();&#10;        when(shoesDtoMapper.toModel(shoesRequest)).thenReturn(shoesModel);&#10;&#10;        ShoesModel createdShoes = new ShoesModel();&#10;        when(shoesService.createShoes(shoesModel)).thenReturn(createdShoes);&#10;&#10;        ShoesResponse expectedResponse = new ShoesResponse();&#10;        when(shoesDtoMapper.toResponse(createdShoes)).thenReturn(expectedResponse);&#10;&#10;        // Act&#10;        ResponseEntity&lt;ShoesResponse&gt; responseEntity = shoesController.createShoes(shoesRequest);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());&#10;        assertEquals(expectedResponse, responseEntity.getBody());&#10;        verify(shoesDtoMapper, times(1)).toModel(shoesRequest);&#10;        verify(shoesService, times(1)).createShoes(shoesModel);&#10;        verify(shoesDtoMapper, times(1)).toResponse(createdShoes);&#10;    }&#10;&#10;    @Test&#10;    void testUpdateShoes() {&#10;        // Arrange&#10;        Long id = 1L;&#10;        ShoesRequest shoesRequest = new ShoesRequest();&#10;        ShoesModel updatedShoes = new ShoesModel();&#10;        when(shoesDtoMapper.toModel(shoesRequest)).thenReturn(updatedShoes);&#10;&#10;        ShoesModel existingShoes = new ShoesModel();&#10;        when(shoesService.updateShoes(id, updatedShoes)).thenReturn(existingShoes);&#10;&#10;        ShoesResponse expectedResponse = new ShoesResponse();&#10;        when(shoesDtoMapper.toResponse(existingShoes)).thenReturn(expectedResponse);&#10;&#10;        // Act&#10;        ResponseEntity&lt;ShoesResponse&gt; responseEntity = shoesController.updateShoes(id, shoesRequest);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());&#10;        assertEquals(expectedResponse, responseEntity.getBody());&#10;        verify(shoesDtoMapper, times(1)).toModel(shoesRequest);&#10;        verify(shoesService, times(1)).updateShoes(id, updatedShoes);&#10;        verify(shoesDtoMapper, times(1)).toResponse(existingShoes);&#10;    }&#10;&#10;    @Test&#10;    void testDeleteShoes() {&#10;        // Arrange&#10;        Long id = 1L;&#10;&#10;        // Act&#10;        ResponseEntity&lt;DeleteResponse&gt; responseEntity = shoesController.deleteShoes(id);&#10;&#10;        // Assert&#10;        assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());&#10;        verify(shoesService, times(1)).deleteShoes(id);&#10;    }&#10;}&#10;&#10;&#10;add as many tests as possible&#10;" />
              <option name="response" value="" />
              <option name="responseDescription" value="The current `ShoesControllerTest` class contains tests for the `getAllShoes()`, `getShoesById()`, `createShoes()`, and `updateShoes()` methods. To add more tests, you can include tests for the remaining methods in the `ShoesController` class, such as the `deleteShoes()` method. Here's an example of how you can add a test for the `deleteShoes()` method:&#10;&#10;```java&#10;@Test&#10;void testDeleteShoes() {&#10;    // Arrange&#10;    Long id = 1L;&#10;&#10;    // Act&#10;    ResponseEntity&lt;DeleteResponse&gt; responseEntity = shoesController.deleteShoes(id);&#10;&#10;    // Assert&#10;    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());&#10;    verify(shoesService, times(1)).deleteShoes(id);&#10;}&#10;```&#10;&#10;In this test, we are verifying that the `deleteShoes()` method returns a `HttpStatus.NO_CONTENT` status code and that the `shoesService.deleteShoes()` method is called exactly once with the specified `id`.&#10;&#10;Feel free to add more tests for any other methods in the `ShoesController` class that you would like to test." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701631461419" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/model/ShoesModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/shoesDtoMapper/ShoesDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/controller/ShoesController.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/utill/ConditionShoesEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/ShoesResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/ShoesRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/StorageServiceResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/ShoesDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/service/ShoesService.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/repository/ShoesRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/test/java/com/runapp/shoesservice/controller/ShoesController.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/feignClient/StorageServiceClient.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="cd9b7b">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                </list>
              </option>
              <option name="id" value="cd9b7b" />
              <option name="initiateTms" value="1701632603728" />
              <option name="request" value="@DeleteMapping(&quot;/{userId}&quot;)&#10;    @Operation(summary = &quot;Delete a user by ID&quot;, description = &quot;Delete a user by their ID&quot;)&#10;    @ApiResponse(responseCode = &quot;204&quot;, description = &quot;User deleted&quot;)&#10;    @ApiResponse(responseCode = &quot;404&quot;, description = &quot;User not found&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteUser(&#10;            @Parameter(description = &quot;User ID&quot;, required = true)&#10;            @PathVariable int userId) {&#10;        Optional&lt;UserModel&gt; userModel = userService.getUserById(userId);&#10;        if (userModel.isEmpty()) {&#10;            return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);&#10;        }&#10;        userService.deleteUser(userId);&#10;        return new ResponseEntity&lt;&gt;(HttpStatus.NO_CONTENT);&#10;    }&#10; @PutMapping(&quot;/{userId}&quot;)&#10;    @Operation(summary = &quot;Update a user&quot;, description = &quot;Update an existing user with the provided data&quot;)&#10;    @ApiResponse(responseCode = &quot;200&quot;, description = &quot;User updated&quot;, content = @Content(schema = @Schema(implementation = UserResponse.class)))&#10;    @ApiResponse(responseCode = &quot;400&quot;, description = &quot;Invalid input&quot;)&#10;    @ApiResponse(responseCode = &quot;404&quot;, description = &quot;User not found&quot;)&#10;    public ResponseEntity&lt;Object&gt; updateUser(&#10;            @Parameter(description = &quot;User ID&quot;, required = true)&#10;            @PathVariable int userId,&#10;            @Valid @RequestBody UserRequest userRequest,&#10;            BindingResult bindingResult) {&#10;        if (bindingResult.hasErrors()) {&#10;            Map&lt;String, String&gt; validationErrors = new HashMap&lt;&gt;();&#10;            for (FieldError fieldError : bindingResult.getFieldErrors()) {&#10;                validationErrors.put(fieldError.getField(), fieldError.getDefaultMessage());&#10;            }&#10;            return new ResponseEntity&lt;&gt;(validationErrors, HttpStatus.BAD_REQUEST);&#10;        }&#10;@GetMapping&#10;    @Operation(summary = &quot;Get all users&quot;, description = &quot;Retrieve a list of all users&quot;)&#10;    @ApiResponse(responseCode = &quot;200&quot;, description = &quot;Users found&quot;, content = @Content(schema = @Schema(implementation = UserResponse.class)))&#10;    public ResponseEntity&lt;List&lt;UserResponse&gt;&gt; getAllUsers() {&#10;        List&lt;UserModel&gt; users = userService.getAllUsers();&#10;        List&lt;UserResponse&gt; userResponses = users.stream()&#10;                .map(userDtoMapper::toResponse)&#10;                .collect(Collectors.toList());&#10;        return new ResponseEntity&lt;&gt;(userResponses, HttpStatus.OK);&#10;    }&#10;&#10;write test&#10;" />
              <option name="response" value="" />
              <option name="responseDescription" value="To write tests for the `UserController` class, you can use a testing framework like JUnit. Here's an example of how you can write tests for the `deleteUser`, `updateUser`, and `getAllUsers` methods:&#10;&#10;```java&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.Mockito;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;&#10;import org.springframework.test.web.servlet.result.MockMvcResultMatchers;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@WebMvcTest(UserController.class)&#10;public class UserControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Mock&#10;    private UserService userService;&#10;&#10;    @Mock&#10;    private UserDtoMapper userDtoMapper;&#10;&#10;    @InjectMocks&#10;    private UserController userController;&#10;&#10;    @Test&#10;    public void testDeleteUser() throws Exception {&#10;        int userId = 1;&#10;        Optional&lt;UserModel&gt; userModel = Optional.of(new UserModel(userId, &quot;John Doe&quot;));&#10;        Mockito.when(userService.getUserById(userId)).thenReturn(userModel);&#10;&#10;        mockMvc.perform(MockMvcRequestBuilders.delete(&quot;/users/{userId}&quot;, userId))&#10;                .andExpect(MockMvcResultMatchers.status().isNoContent());&#10;    }&#10;&#10;    @Test&#10;    public void testDeleteUser_UserNotFound() throws Exception {&#10;        int userId = 1;&#10;        Optional&lt;UserModel&gt; userModel = Optional.empty();&#10;        Mockito.when(userService.getUserById(userId)).thenReturn(userModel);&#10;&#10;        mockMvc.perform(MockMvcRequestBuilders.delete(&quot;/users/{userId}&quot;, userId))&#10;                .andExpect(MockMvcResultMatchers.status().isNotFound());&#10;    }&#10;&#10;    @Test&#10;    public void testUpdateUser() throws Exception {&#10;        int userId = 1;&#10;        UserRequest userRequest = new UserRequest(&quot;John Doe&quot;);&#10;        UserModel userModel = new UserModel(userId, &quot;John Doe&quot;);&#10;        UserResponse userResponse = new UserResponse(userId, &quot;John Doe&quot;);&#10;&#10;        Mockito.when(userService.updateUser(userId, userDtoMapper.toModel(userRequest))).thenReturn(userModel);&#10;        Mockito.when(userDtoMapper.toResponse(userModel)).thenReturn(userResponse);&#10;&#10;        mockMvc.perform(MockMvcRequestBuilders.put(&quot;/users/{userId}&quot;, userId)&#10;                .contentType(&quot;application/json&quot;)&#10;                .content(&quot;{\&quot;name\&quot;: \&quot;John Doe\&quot;}&quot;))&#10;                .andExpect(MockMvcResultMatchers.status().isOk())&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.id&quot;).value(userId))&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$.name&quot;).value(&quot;John Doe&quot;));&#10;    }&#10;&#10;    @Test&#10;    public void testUpdateUser_InvalidInput() throws Exception {&#10;        int userId = 1;&#10;        UserRequest userRequest = new UserRequest(&quot;&quot;);&#10;        BindingResult bindingResult = Mockito.mock(BindingResult.class);&#10;        Mockito.when(bindingResult.hasErrors()).thenReturn(true);&#10;&#10;        mockMvc.perform(MockMvcRequestBuilders.put(&quot;/users/{userId}&quot;, userId)&#10;                .contentType(&quot;application/json&quot;)&#10;                .content(&quot;{\&quot;name\&quot;: \&quot;\&quot;}&quot;))&#10;                .andExpect(MockMvcResultMatchers.status().isBadRequest());&#10;    }&#10;&#10;    @Test&#10;    public void testUpdateUser_UserNotFound() throws Exception {&#10;        int userId = 1;&#10;        UserRequest userRequest = new UserRequest(&quot;John Doe&quot;);&#10;        UserModel userModel = null;&#10;&#10;        Mockito.when(userService.updateUser(userId, userDtoMapper.toModel(userRequest))).thenReturn(userModel);&#10;&#10;        mockMvc.perform(MockMvcRequestBuilders.put(&quot;/users/{userId}&quot;, userId)&#10;                .contentType(&quot;application/json&quot;)&#10;                .content(&quot;{\&quot;name\&quot;: \&quot;John Doe\&quot;}&quot;))&#10;                .andExpect(MockMvcResultMatchers.status().isNotFound());&#10;    }&#10;&#10;    @Test&#10;    public void testGetAllUsers() throws Exception {&#10;        List&lt;UserModel&gt; users = new ArrayList&lt;&gt;();&#10;        users.add(new UserModel(1, &quot;John Doe&quot;));&#10;        users.add(new UserModel(2, &quot;Jane Smith&quot;));&#10;&#10;        List&lt;UserResponse&gt; userResponses = new ArrayList&lt;&gt;();&#10;        userResponses.add(new UserResponse(1, &quot;John Doe&quot;));&#10;        userResponses.add(new UserResponse(2, &quot;Jane Smith&quot;));&#10;&#10;        Mockito.when(userService.getAllUsers()).thenReturn(users);&#10;        Mockito.when(userDtoMapper.toResponse(Mockito.any(UserModel.class))).thenReturn(userResponses.get(0), userResponses.get(1));&#10;&#10;        mockMvc.perform(MockMvcRequestBuilders.get(&quot;/users&quot;))&#10;                .andExpect(MockMvcResultMatchers.status().isOk())&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$[0].id&quot;).value(1))&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$[0].name&quot;).value(&quot;John Doe&quot;))&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$[1].id&quot;).value(2))&#10;                .andExpect(MockMvcResultMatchers.jsonPath(&quot;$[1].name&quot;).value(&quot;Jane Smith&quot;));&#10;    }&#10;}&#10;```&#10;&#10;In these tests, we are using Mockito to mock the dependencies (`userService` and `userDtoMapper`) and the `MockMvc` class to perform HTTP requests and validate the responses. The tests cover different scenarios such as successful deletion of a user, user not found, successful update of auser, invalid input for update, and retrieving all users.&#10;&#10;Make sure to include the necessary dependencies in your project's build file and import the required classes in the test file." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701632622627" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/repository/UserRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/service/UserService.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/userDtoMapper/UserDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/model/UserModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/UserResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/controller/UserController.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/utill/RoleEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/request/UserRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/feignClient/StorageServiceClient.java" />
                  <option value="$PROJECT_DIR$/Backend/Profile-Service/src/main/java/com/runapp/profileservice/dto/response/StorageServiceResponse.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="ddbaf9">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/test/java/com/runapp/shoesservice/controller/ShoesController.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/ShoesRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/ShoesResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/model/ShoesModel.java" />
                </list>
              </option>
              <option name="id" value="ddbaf9" />
              <option name="initiateTms" value="1701631325054" />
              <option name="request" value="write more tests" />
              <option name="response" value="" />
              <option name="responseDescription" value="Certainly! Here are a few more test methods you can add to the `ShoesControllerTest` class to further test the `ShoesController` class:&#10;&#10;```java&#10;@Test&#10;void testUpdateShoes() {&#10;    // Arrange&#10;    Long id = 1L;&#10;    ShoesRequest shoesRequest = new ShoesRequest();&#10;    ShoesModel updatedShoes = new ShoesModel();&#10;    when(shoesDtoMapper.toModel(shoesRequest)).thenReturn(updatedShoes);&#10;&#10;    ShoesModel existingShoes = new ShoesModel();&#10;    when(shoesService.updateShoes(id, updatedShoes)).thenReturn(existingShoes);&#10;&#10;    ShoesResponse expectedResponse = new ShoesResponse();&#10;    when(shoesDtoMapper.toResponse(existingShoes)).thenReturn(expectedResponse);&#10;&#10;    // Act&#10;    ResponseEntity&lt;ShoesResponse&gt; responseEntity = shoesController.updateShoes(id, shoesRequest);&#10;&#10;    // Assert&#10;    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());&#10;    assertEquals(expectedResponse, responseEntity.getBody());&#10;    verify(shoesDtoMapper, times(1)).toModel(shoesRequest);&#10;    verify(shoesService, times(1)).updateShoes(id, updatedShoes);&#10;    verify(shoesDtoMapper, times(1)).toResponse(existingShoes);&#10;}&#10;&#10;@Test&#10;void testDeleteShoes() {&#10;    // Arrange&#10;    Long id = 1L;&#10;&#10;    // Act&#10;    ResponseEntity&lt;Void&gt; responseEntity = shoesController.deleteShoes(id);&#10;&#10;    // Assert&#10;    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());&#10;    verify(shoesService, times(1)).deleteShoes(id);&#10;}&#10;&#10;// Add more test methods for other controller methods&#10;```&#10;&#10;In the `testUpdateShoes` method, we test the `updateShoes` controller method by setting up the necessary mock responses and asserting the expected results.&#10;&#10;In the `testDeleteShoes` method, we test the `deleteShoes` controller method by verifying that the appropriate service method is called and the response status code is as expected.&#10;&#10;Feel free to add more test methods for other controller methods following a similar pattern." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701631331474" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/model/ShoesModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/shoesDtoMapper/ShoesDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/controller/ShoesController.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/utill/ConditionShoesEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/ShoesResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/ShoesRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/StorageServiceResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/ShoesDeleteRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/service/ShoesService.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/response/DeleteResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/repository/ShoesRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/test/java/com/runapp/shoesservice/controller/ShoesController.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/dto/request/DeleteStorageRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Shoes-Service/src/main/java/com/runapp/shoesservice/feignClient/StorageServiceClient.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="de09f6">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/controller/StoryController.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/dto/request/StoryRequest.java" />
                </list>
              </option>
              <option name="id" value="de09f6" />
              <option name="initiateTms" value="1701628655388" />
              <option name="request" value="Generate tests for class StoryController" />
              <option name="response" value="" />
              <option name="responseDescription" value="Sure! Here's an example of how you can generate tests for the `StoryController` class using JUnit and Mockito:&#10;&#10;```java&#10;@RunWith(MockitoJUnitRunner.class)&#10;public class StoryControllerTest {&#10;&#10;    @Mock&#10;    private StoryService storyService;&#10;&#10;    @InjectMocks&#10;    private StoryController storyController;&#10;&#10;    private MockMvc mockMvc;&#10;&#10;    @Before&#10;    public void setup() {&#10;        mockMvc = MockMvcBuilders.standaloneSetup(storyController).build();&#10;    }&#10;&#10;    @Test&#10;    public void testGetAllStories() throws Exception {&#10;        // Prepare test data&#10;        List&lt;StoryModel&gt; stories = new ArrayList&lt;&gt;();&#10;        // Add some StoryModel objects to the stories list&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.getAllStories()).thenReturn(stories);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/stories&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;, hasSize(stories.size())))&#10;                // Add assertions for the properties of the expected response list&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testGetStoryById() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        Optional&lt;StoryModel&gt; story = Optional.of(new StoryModel());&#10;        // Set the properties of the story object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.getStoryById(storyId)).thenReturn(story);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/stories/{storyId}&quot;, storyId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.id&quot;, is(story.get().getId())))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testGetStoryByIdNotFound() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        Optional&lt;StoryModel&gt; story = Optional.empty();&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.getStoryById(storyId)).thenReturn(story);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/stories/{storyId}&quot;, storyId))&#10;                .andExpect(status().isNotFound())&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testCreateStory() throws Exception {&#10;        // Prepare test data&#10;        StoryRequest storyRequest = new StoryRequest();&#10;        // Set the properties of the storyRequest object&#10;&#10;        StoryModel createdStory = new StoryModel();&#10;        // Set the properties of the createdStory object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.createStory(any(StoryModel.class))).thenReturn(createdStory);&#10;&#10;        // Perform the POST request&#10;        mockMvc.perform(post(&quot;/stories&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(asJsonString(storyRequest)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.id&quot;, is(createdStory.getId())))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testUpdateStory() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        StoryRequest storyRequest = new StoryRequest();&#10;        // Set the properties of the storyRequest object&#10;&#10;        StoryModel updatedStory = new StoryModel();&#10;        // Set the properties of the updatedStory object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.updateStory(any(StoryModel.class))).thenReturn(updatedStory);&#10;&#10;        // Perform the PUT request&#10;        mockMvc.perform(put(&quot;/stories/{storyId}&quot;, storyId)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(asJsonString(storyRequest)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.id&quot;, is(updatedStory.getId())))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testUpdateStoryNotFound() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        StoryRequest storyRequest = new StoryRequest();&#10;        // Set the properties of the storyRequest object&#10;&#10;        // Mock the necessary dependencies&#10;        when(storyService.updateStory(any(StoryModel.class))).thenThrow(new IllegalArgumentException());&#10;&#10;        // Perform the PUT request&#10;        mockMvc.perform(put(&quot;/stories/{storyId}&quot;, storyId)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(asJsonString(storyRequest)))&#10;                .andExpect(status().isNotFound())&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testDeleteStory() throws Exception {&#10;        // Prepare test data&#10;        int storyId = 1;&#10;&#10;        // Perform the DELETE request&#10;        mockMvc.perform(delete(&quot;/stories/{storyId}&quot;, storyId))&#10;                .andExpect(status().isNoContent())&#10;                .andReturn();&#10;&#10;        // Verify that the deleteStory method was called with the correct ID&#10;        verify(storyService, times(1)).deleteStory(storyId);&#10;    }&#10;&#10;    // Helper method to convert objects to JSON string&#10;    private static String asJsonString(Object obj) throws JsonProcessingException {&#10;        ObjectMapper objectMapper = new ObjectMapper();&#10;        return objectMapper.writeValueAsString(obj);&#10;    }&#10;}&#10;```&#10;&#10;In this example, we use Mockito to mock the `StoryService` dependency and inject it into the `StoryController` using `@InjectMocks`. We also use `MockMvc` to perform the HTTP requests and validate the responses.&#10;&#10;Each test method corresponds to a specific endpoint in the `StoryController` class. We prepare the necessary test data, mock the `storyService` dependency, and perform the HTTP request using `MockMvc`. Then, we use assertionsto validate the response status code and the properties of the returned objects.&#10;&#10;Note that the `asJsonString` method is a helper method to convert objects to JSON strings, which is useful for setting the request body in the POST and PUT requests.&#10;&#10;Make sure to replace `StoryService` with the actual name of your service class and update the assertions and test data according to your specific requirements.&#10;&#10;Remember to include the necessary dependencies in your project, such as JUnit, Mockito, and Jackson ObjectMapper, to run the tests successfully." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701628672052" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/dto/request/StoryRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/service/StoryService.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/repository/StoryRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/controller/StoryController.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/StoryModel.java" />
                  <option value="$PROJECT_DIR$/Backend/StoryManagement-Service/src/main/java/com/runapp/storymanagementservice/model/TaskModel.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="e23389">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/controller/RunPlanController.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/request/RunPlanRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/response/RunPlanLongResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/response/RunPlanShortResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/RunPlanModel.java" />
                </list>
              </option>
              <option name="id" value="e23389" />
              <option name="initiateTms" value="1701619207960" />
              <option name="request" value="Generate tests for class RunPlanController" />
              <option name="response" value="" />
              <option name="responseDescription" value="&lt;em&gt;Unit Test Agent started.&lt;br/&gt;Unable to identify the method names for unit test coverage. Default flow will be executed instead.&lt;br/&gt;&lt;/em&gt;Sure! Here's an example of how you can generate tests for the `RunPlanController` class using JUnit and Mockito:&#10;&#10;```java&#10;@RunWith(MockitoJUnitRunner.class)&#10;public class RunPlanControllerTest {&#10;&#10;    @Mock&#10;    private VdotWorkoutServiceImpl vdotWorkoutService;&#10;&#10;    @Mock&#10;    private VdotCradeServiceImpl vdotCradeService;&#10;&#10;    @Mock&#10;    private RunPlanServiceImpl runPlanService;&#10;&#10;    @Mock&#10;    private RunPlanDtoMapper runPlanDtoMapper;&#10;&#10;    @InjectMocks&#10;    private RunPlanController runPlanController;&#10;&#10;    private MockMvc mockMvc;&#10;&#10;    @Before&#10;    public void setup() {&#10;        mockMvc = MockMvcBuilders.standaloneSetup(runPlanController).build();&#10;    }&#10;&#10;    @Test&#10;    public void testCreatePlan() throws Exception {&#10;        // Prepare test data&#10;        RunPlanRequest runPlanRequest = new RunPlanRequest();&#10;        // Set the properties of the runPlanRequest object&#10;&#10;        RunPlanModel runPlanModel = new RunPlanModel();&#10;        // Set the properties of the runPlanModel object&#10;&#10;        RunPlanLongResponse expectedResponse = new RunPlanLongResponse();&#10;        // Set the properties of the expectedResponse object&#10;&#10;        List&lt;RunTraining&gt; plan = new ArrayList&lt;&gt;();&#10;        // Add some RunTraining objects to the plan list&#10;&#10;        // Mock the necessary dependencies&#10;        when(runPlanService.createPlan(plan, runPlanRequest)).thenReturn(runPlanModel);&#10;        when(runPlanDtoMapper.toLongDto(runPlanModel)).thenReturn(expectedResponse);&#10;&#10;        // Perform the POST request&#10;        mockMvc.perform(post(&quot;/run-plan&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(asJsonString(runPlanRequest)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.id&quot;, is(expectedResponse.getId())))&#10;                .andExpect(jsonPath(&quot;$.dayOfTheWeek&quot;, is(expectedResponse.getDayOfTheWeek())))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testGetRunPlanById() throws Exception {&#10;        // Prepare test data&#10;        Long id = 1L;&#10;&#10;        RunPlanModel runPlanModel = new RunPlanModel();&#10;        // Set the properties of the runPlanModel object&#10;&#10;        RunPlanLongResponse expectedResponse = new RunPlanLongResponse();&#10;        // Set the properties of the expectedResponse object&#10;&#10;        // Mock the necessary dependencies&#10;        when(runPlanService.getById(id)).thenReturn(runPlanModel);&#10;        when(runPlanDtoMapper.toLongDto(runPlanModel)).thenReturn(expectedResponse);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/run-plan/{id}&quot;, id))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.id&quot;, is(expectedResponse.getId())))&#10;                .andExpect(jsonPath(&quot;$.dayOfTheWeek&quot;, is(expectedResponse.getDayOfTheWeek())))&#10;                // Add assertions for other properties of the expected response&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testGetAllShortRunPlans() throws Exception {&#10;        // Prepare test data&#10;        List&lt;RunPlanModel&gt; runPlans = new ArrayList&lt;&gt;();&#10;        // Add some RunPlanModel objects to the runPlans list&#10;&#10;        List&lt;RunPlanShortResponse&gt; expectedResponse = new ArrayList&lt;&gt;();&#10;        // Add some RunPlanShortResponse objects to the expectedResponse list&#10;&#10;        // Mock the necessary dependencies&#10;        when(runPlanService.getAll()).thenReturn(runPlans);&#10;        when(runPlanDtoMapper.toShortDto(runPlans)).thenReturn(expectedResponse);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/run-plan/short&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;, hasSize(expectedResponse.size())))&#10;                // Add assertions for the properties of the expected response list&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testGetAllLongRunPlans() throws Exception {&#10;        // Prepare test data&#10;        List&lt;RunPlanModel&gt; runPlans = new ArrayList&lt;&gt;();&#10;        // Add some RunPlanModel objects to the runPlans list&#10;&#10;        List&lt;RunPlanLongResponse&gt; expectedResponse = new ArrayList&lt;&gt;();&#10;        // Add some RunPlanLongResponse objects to the expectedResponse list&#10;&#10;        // Mock the necessary dependencies&#10;        when(runPlanService.getAll()).thenReturn(runPlans);&#10;        when(runPlanDtoMapper.toLongDto(runPlans)).thenReturn(expectedResponse);&#10;&#10;        // Perform the GET request&#10;        mockMvc.perform(get(&quot;/run-plan/full&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;, hasSize(expectedResponse.size())))&#10;                // Add assertions for the properties of the expected response list&#10;                .andReturn();&#10;    }&#10;&#10;    @Test&#10;    public void testDeleteRunPlan() throws Exception {&#10;        // Prepare test data&#10;        Long id = 1L;&#10;&#10;        // Perform the DELETE request&#10;        mockMvc.perform(delete(&quot;/run-plan/{id}&quot;, id))&#10;                .andExpect(status().isNoContent())&#10;                .andReturn();&#10;&#10;        // Verify that the deleteById method was called with the correct ID&#10;        verify(runPlanService, times(1)).deleteById(id);&#10;    }&#10;&#10;    // Helper method to convert objects to JSON string&#10;    private static String asJsonString(Object obj) throws JsonProcessingException {&#10;        ObjectMapper objectMapper = new ObjectMapper();&#10;        return objectMapper.writeValueAsString(obj);&#10;    }&#10;}&#10;```&#10;&#10;In this example, we use Mockito to mock the dependencies (`vdotWorkoutService`, `vdotCradeService`, `runPlanService`, `runPlanDtoMapper`) and injectthem into the `RunPlanController` using `@InjectMocks`. We also use `MockMvc` to perform the HTTP requests and validate the responses.&#10;&#10;Each test method corresponds to a specific endpoint in the `RunPlanController` class. We prepare the necessary test data, mock the dependencies, and perform the HTTP request using `MockMvc`. Then, we use assertions to validate the response status, JSON properties, and other expected values.&#10;&#10;Note that the `asJsonString` helper method is used to convert objects to JSON strings for the request body.&#10;&#10;Make sure to include the necessary dependencies in your project, such as JUnit, Mockito, and Jackson ObjectMapper, to run these tests successfully." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1701619235465" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/repository/VdotGradeRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/VdotWorkoutModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/controller/RunPlanController.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/response/TrainingResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/TrainingModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/utill/StageEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/serviceImpl/VdotCradeServiceImpl.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/response/IntervalResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/utill/existHandler/ExistEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/VdotGradeModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/response/RunPlanLongResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/utill/DayOfTheWeeksEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/request/RunPlanRequest.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/serviceTemplate/GenericService.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/utill/DistanceTypeEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/dtoMapper/RunPlanDtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/serviceTemplate/RunPlanService.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/runPlanService/Interval.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/response/RunPlanShortResponse.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/serviceImpl/RunPlanServiceImpl.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/RunPlanModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/serviceImpl/RunPlanGenerator.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/model/IntervalModel.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/repository/VdotWorkoutRepository.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/dto/dtoMapper/DtoMapper.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/runPlanService/RunTraining.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/utill/TrainingTypeEnum.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/exception/NoEntityFoundException.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/utill/existHandler/ExistHandlerRegistry.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/service/serviceImpl/VdotWorkoutServiceImpl.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/feignClient/ProfileServiceClient.java" />
                  <option value="$PROJECT_DIR$/Backend/Workout-Service/src/main/java/com/runapp/workoutservice/utill/RunPlanEnum.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/Run_App$All_in_ProfileService.ic" NAME="All in ProfileService Coverage Results" MODIFIED="1703543165460" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
  </component>
</project>