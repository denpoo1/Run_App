version: '3'

services:

  db:
    container_name: postgres_test
    image: postgres
    restart: always
    environment:
      - POSTGRES_DB=Run_App
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=25032001
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      - backend

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./Configs/mysql_keycloak_data:/var/lib/mysql
    networks:
      - backend
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password


  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    networks:
      - backend
    volumes:
      - ./Configs/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql


  profile-service:
    container_name: profile-service
    image: denpool/profile-service:0.0.2
    restart: always
    networks:
      - backend
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8887
      - SPRING_CLOUD_CONFIG_PROFILE=docker
    depends_on:
      discovery-service:
        condition: service_started
      config-service:
        condition: service_healthy


  social-service:
    container_name: social-service
    image: denpool/social-service:0.0.2
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8887
      - SPRING_CLOUD_CONFIG_PROFILE=docker
    depends_on:
      discovery-service:
        condition: service_started
      config-service:
        condition: service_healthy
    networks:
      - backend


  guild-service:
    container_name: guild-service
    image: denpool/guild-service:0.0.2
    restart: always
    networks:
      - backend
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8887
      - SPRING_CLOUD_CONFIG_PROFILE=docker
    depends_on:
      discovery-service:
        condition: service_started
      config-service:
        condition: service_healthy


  shoes-service:
    container_name: shoes-service
    image: denpool/shoes-service:0.0.2
    restart: always
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8887
      - SPRING_CLOUD_CONFIG_PROFILE=docker
    networks:
      - backend
    depends_on:
      discovery-service:
        condition: service_started
      config-service:
        condition: service_healthy

  achievement-service:
    container_name: achievement-service
    image: denpool/achievement-service:0.0.1
    networks:
      - backend
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/Run_App
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=25032001
      - STORAGE-DIRECTORY=AchievementService/
      - SPRING_CLOUD_OPENFEIGN_CLIENT_CONFIG_STORAGE-SERVICE_URL=http://storage-service:6500
      - SPRING_CLOUD_OPENFEIGN_CLIENT_CONFIG_STORY-MANAGER-SERVICE_URL=http://story-manager-service:4444
    depends_on:
      discovery-service:
        condition: service_started
      config-service:
        condition: service_healthy


  story-manager-service:
    container_name: story-manager-service
    image: denpool/story-manager-service:0.0.2
    networks:
      - backend
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8887
      - SPRING_CLOUD_CONFIG_PROFILE=docker
    depends_on:
      discovery-service:
        condition: service_started
      config-service:
        condition: service_healthy


  story-progress-service:
    container_name: story-progress-service
    image: denpool/story-progress-service:0.0.2
    networks:
      - backend
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8887
      - SPRING_CLOUD_CONFIG_PROFILE=docker
    depends_on:
      discovery-service:
        condition: service_started
      config-service:
        condition: service_healthy


  workout-service:
    container_name: workout-service
    image: denpool/workout-service:0.0.2
    networks:
      - backend
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8887
      - SPRING_CLOUD_CONFIG_PROFILE=docker
    depends_on:
      discovery-service:
        condition: service_started
      config-service:
        condition: service_healthy

  discovery-service:
    container_name: discovery-service
    image: denpool/discovery-service
    restart: always
    ports:
      - "7777:8761"
    networks:
      - backend
    depends_on:
      zipkin:
        condition: service_healthy

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.37.1
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./Configs/prometheus-config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    depends_on:
      discovery-service:
        condition: service_started

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - backend

  storage-service:
    container_name: storage-service
    image: denpool/storage-service:0.0.1
    restart: always
    networks:
      - backend
    depends_on:
      discovery-service:
        condition: service_started

  grafana:
    container_name: grafana
    image: grafana/grafana-oss:8.5.2
    restart: always
    volumes:
      - ./Configs/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - backend
    depends_on:
      prometheus:
        condition: service_started


  event-service:
    container_name: event-service
    image: denpool/event-service:0.0.3
    networks:
      - backend
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8887
      - SPRING_CLOUD_CONFIG_PROFILE=docker
    depends_on:
      config-service:
        condition: service_healthy

  config-service:
    container_name: config-service
    image: denpool/config-service:0.0.1
    networks:
      - backend
    environment:
      - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=https://github.com/RunAppHackaton/MicroservicesConfigs.git
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka

  api-gateway:
    container_name: api-gateway
    image: denpool/api-gateway:0.0.1
    ports:
      - "80:3000"
    networks:
      - backend
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - "5656:8080"
    networks:
      - backend

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:5.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    container_name: kafka
    image: confluentinc/cp-enterprise-kafka:5.5.3
    depends_on: [ zookeeper ]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9991
    networks:
      - backend

  debezium-potgres-connector:
    container_name: debezium-potgres-connector
    image: debezium/connect:1.4
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on: [ kafka ]
    networks:
      - backend

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:5.5.3
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    depends_on: [ zookeeper, kafka ]
    networks:
      - backend

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    environment:
      - discovery.type=single-node
    networks:
      - backend

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.14.0
    volumes:
      - ./Configs/logstash-config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    command: logstash -f /usr/share/logstash/pipeline/logstash.conf
    networks:
      - backend

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.10.2
    ports:
      - '5601:5601'
    depends_on:
      - elasticsearch
    environment:
      SERVER_NAME: kibana.example.org
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - backend

networks:
  backend:
volumes:
  db-data: